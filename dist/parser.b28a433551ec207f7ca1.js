webpackJsonp([2],{16:function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},17:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (f) {\n    if (( false ? \"undefined\" : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f();\n    } else if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        var g;if (typeof window !== \"undefined\") {\n            g = window;\n        } else if (typeof global !== \"undefined\") {\n            g = global;\n        } else if (typeof self !== \"undefined\") {\n            g = self;\n        } else {\n            g = this;\n        }g.parser = f();\n    }\n})(function () {\n    var define, module, exports;return function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            }return n[o].exports;\n        }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {\n            s(r[o]);\n        }return s;\n    }({ 1: [function (require, module, exports) {\n            (function (global) {\n                /*! https://mths.be/punycode v1.4.1 by @mathias */\n                ;(function (root) {\n\n                    /** Detect free variables */\n                    var freeExports = (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;\n                    var freeModule = (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module && !module.nodeType && module;\n                    var freeGlobal = (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global;\n                    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {\n                        root = freeGlobal;\n                    }\n\n                    /**\n                     * The `punycode` object.\n                     * @name punycode\n                     * @type Object\n                     */\n                    var punycode,\n\n\n                    /** Highest positive signed 32-bit float value */\n                    maxInt = 2147483647,\n                        // aka. 0x7FFFFFFF or 2^31-1\n\n                    /** Bootstring parameters */\n                    base = 36,\n                        tMin = 1,\n                        tMax = 26,\n                        skew = 38,\n                        damp = 700,\n                        initialBias = 72,\n                        initialN = 128,\n                        // 0x80\n                    delimiter = '-',\n                        // '\\x2D'\n\n                    /** Regular expressions */\n                    regexPunycode = /^xn--/,\n                        regexNonASCII = /[^\\x20-\\x7E]/,\n                        // unprintable ASCII chars + non-ASCII chars\n                    regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n                        // RFC 3490 separators\n\n                    /** Error messages */\n                    errors = {\n                        'overflow': 'Overflow: input needs wider integers to process',\n                        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n                        'invalid-input': 'Invalid input'\n                    },\n\n\n                    /** Convenience shortcuts */\n                    baseMinusTMin = base - tMin,\n                        floor = Math.floor,\n                        stringFromCharCode = String.fromCharCode,\n\n\n                    /** Temporary variable */\n                    key;\n\n                    /*--------------------------------------------------------------------------*/\n\n                    /**\n                     * A generic error utility function.\n                     * @private\n                     * @param {String} type The error type.\n                     * @returns {Error} Throws a `RangeError` with the applicable error message.\n                     */\n                    function error(type) {\n                        throw new RangeError(errors[type]);\n                    }\n\n                    /**\n                     * A generic `Array#map` utility function.\n                     * @private\n                     * @param {Array} array The array to iterate over.\n                     * @param {Function} callback The function that gets called for every array\n                     * item.\n                     * @returns {Array} A new array of values returned by the callback function.\n                     */\n                    function map(array, fn) {\n                        var length = array.length;\n                        var result = [];\n                        while (length--) {\n                            result[length] = fn(array[length]);\n                        }\n                        return result;\n                    }\n\n                    /**\n                     * A simple `Array#map`-like wrapper to work with domain name strings or email\n                     * addresses.\n                     * @private\n                     * @param {String} domain The domain name or email address.\n                     * @param {Function} callback The function that gets called for every\n                     * character.\n                     * @returns {Array} A new string of characters returned by the callback\n                     * function.\n                     */\n                    function mapDomain(string, fn) {\n                        var parts = string.split('@');\n                        var result = '';\n                        if (parts.length > 1) {\n                            // In email addresses, only the domain name should be punycoded. Leave\n                            // the local part (i.e. everything up to `@`) intact.\n                            result = parts[0] + '@';\n                            string = parts[1];\n                        }\n                        // Avoid `split(regex)` for IE8 compatibility. See #17.\n                        string = string.replace(regexSeparators, '\\x2E');\n                        var labels = string.split('.');\n                        var encoded = map(labels, fn).join('.');\n                        return result + encoded;\n                    }\n\n                    /**\n                     * Creates an array containing the numeric code points of each Unicode\n                     * character in the string. While JavaScript uses UCS-2 internally,\n                     * this function will convert a pair of surrogate halves (each of which\n                     * UCS-2 exposes as separate characters) into a single code point,\n                     * matching UTF-16.\n                     * @see `punycode.ucs2.encode`\n                     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n                     * @memberOf punycode.ucs2\n                     * @name decode\n                     * @param {String} string The Unicode input string (UCS-2).\n                     * @returns {Array} The new array of code points.\n                     */\n                    function ucs2decode(string) {\n                        var output = [],\n                            counter = 0,\n                            length = string.length,\n                            value,\n                            extra;\n                        while (counter < length) {\n                            value = string.charCodeAt(counter++);\n                            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n                                // high surrogate, and there is a next character\n                                extra = string.charCodeAt(counter++);\n                                if ((extra & 0xFC00) == 0xDC00) {\n                                    // low surrogate\n                                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                                } else {\n                                    // unmatched surrogate; only append this code unit, in case the next\n                                    // code unit is the high surrogate of a surrogate pair\n                                    output.push(value);\n                                    counter--;\n                                }\n                            } else {\n                                output.push(value);\n                            }\n                        }\n                        return output;\n                    }\n\n                    /**\n                     * Creates a string based on an array of numeric code points.\n                     * @see `punycode.ucs2.decode`\n                     * @memberOf punycode.ucs2\n                     * @name encode\n                     * @param {Array} codePoints The array of numeric code points.\n                     * @returns {String} The new Unicode string (UCS-2).\n                     */\n                    function ucs2encode(array) {\n                        return map(array, function (value) {\n                            var output = '';\n                            if (value > 0xFFFF) {\n                                value -= 0x10000;\n                                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n                                value = 0xDC00 | value & 0x3FF;\n                            }\n                            output += stringFromCharCode(value);\n                            return output;\n                        }).join('');\n                    }\n\n                    /**\n                     * Converts a basic code point into a digit/integer.\n                     * @see `digitToBasic()`\n                     * @private\n                     * @param {Number} codePoint The basic numeric code point value.\n                     * @returns {Number} The numeric value of a basic code point (for use in\n                     * representing integers) in the range `0` to `base - 1`, or `base` if\n                     * the code point does not represent a value.\n                     */\n                    function basicToDigit(codePoint) {\n                        if (codePoint - 48 < 10) {\n                            return codePoint - 22;\n                        }\n                        if (codePoint - 65 < 26) {\n                            return codePoint - 65;\n                        }\n                        if (codePoint - 97 < 26) {\n                            return codePoint - 97;\n                        }\n                        return base;\n                    }\n\n                    /**\n                     * Converts a digit/integer into a basic code point.\n                     * @see `basicToDigit()`\n                     * @private\n                     * @param {Number} digit The numeric value of a basic code point.\n                     * @returns {Number} The basic code point whose value (when used for\n                     * representing integers) is `digit`, which needs to be in the range\n                     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n                     * used; else, the lowercase form is used. The behavior is undefined\n                     * if `flag` is non-zero and `digit` has no uppercase form.\n                     */\n                    function digitToBasic(digit, flag) {\n                        //  0..25 map to ASCII a..z or A..Z\n                        // 26..35 map to ASCII 0..9\n                        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n                    }\n\n                    /**\n                     * Bias adaptation function as per section 3.4 of RFC 3492.\n                     * https://tools.ietf.org/html/rfc3492#section-3.4\n                     * @private\n                     */\n                    function adapt(delta, numPoints, firstTime) {\n                        var k = 0;\n                        delta = firstTime ? floor(delta / damp) : delta >> 1;\n                        delta += floor(delta / numPoints);\n                        for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n                            delta = floor(delta / baseMinusTMin);\n                        }\n                        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n                    }\n\n                    /**\n                     * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n                     * symbols.\n                     * @memberOf punycode\n                     * @param {String} input The Punycode string of ASCII-only symbols.\n                     * @returns {String} The resulting string of Unicode symbols.\n                     */\n                    function decode(input) {\n                        // Don't use UCS-2\n                        var output = [],\n                            inputLength = input.length,\n                            out,\n                            i = 0,\n                            n = initialN,\n                            bias = initialBias,\n                            basic,\n                            j,\n                            index,\n                            oldi,\n                            w,\n                            k,\n                            digit,\n                            t,\n\n                        /** Cached calculation results */\n                        baseMinusT;\n\n                        // Handle the basic code points: let `basic` be the number of input code\n                        // points before the last delimiter, or `0` if there is none, then copy\n                        // the first basic code points to the output.\n\n                        basic = input.lastIndexOf(delimiter);\n                        if (basic < 0) {\n                            basic = 0;\n                        }\n\n                        for (j = 0; j < basic; ++j) {\n                            // if it's not a basic code point\n                            if (input.charCodeAt(j) >= 0x80) {\n                                error('not-basic');\n                            }\n                            output.push(input.charCodeAt(j));\n                        }\n\n                        // Main decoding loop: start just after the last delimiter if any basic code\n                        // points were copied; start at the beginning otherwise.\n\n                        for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n\n                            // `index` is the index of the next character to be consumed.\n                            // Decode a generalized variable-length integer into `delta`,\n                            // which gets added to `i`. The overflow checking is easier\n                            // if we increase `i` as we go, then subtract off its starting\n                            // value at the end to obtain `delta`.\n                            for (oldi = i, w = 1, k = base;; /* no condition */k += base) {\n\n                                if (index >= inputLength) {\n                                    error('invalid-input');\n                                }\n\n                                digit = basicToDigit(input.charCodeAt(index++));\n\n                                if (digit >= base || digit > floor((maxInt - i) / w)) {\n                                    error('overflow');\n                                }\n\n                                i += digit * w;\n                                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n                                if (digit < t) {\n                                    break;\n                                }\n\n                                baseMinusT = base - t;\n                                if (w > floor(maxInt / baseMinusT)) {\n                                    error('overflow');\n                                }\n\n                                w *= baseMinusT;\n                            }\n\n                            out = output.length + 1;\n                            bias = adapt(i - oldi, out, oldi == 0);\n\n                            // `i` was supposed to wrap around from `out` to `0`,\n                            // incrementing `n` each time, so we'll fix that now:\n                            if (floor(i / out) > maxInt - n) {\n                                error('overflow');\n                            }\n\n                            n += floor(i / out);\n                            i %= out;\n\n                            // Insert `n` at position `i` of the output\n                            output.splice(i++, 0, n);\n                        }\n\n                        return ucs2encode(output);\n                    }\n\n                    /**\n                     * Converts a string of Unicode symbols (e.g. a domain name label) to a\n                     * Punycode string of ASCII-only symbols.\n                     * @memberOf punycode\n                     * @param {String} input The string of Unicode symbols.\n                     * @returns {String} The resulting Punycode string of ASCII-only symbols.\n                     */\n                    function encode(input) {\n                        var n,\n                            delta,\n                            handledCPCount,\n                            basicLength,\n                            bias,\n                            j,\n                            m,\n                            q,\n                            k,\n                            t,\n                            currentValue,\n                            output = [],\n\n                        /** `inputLength` will hold the number of code points in `input`. */\n                        inputLength,\n\n                        /** Cached calculation results */\n                        handledCPCountPlusOne,\n                            baseMinusT,\n                            qMinusT;\n\n                        // Convert the input in UCS-2 to Unicode\n                        input = ucs2decode(input);\n\n                        // Cache the length\n                        inputLength = input.length;\n\n                        // Initialize the state\n                        n = initialN;\n                        delta = 0;\n                        bias = initialBias;\n\n                        // Handle the basic code points\n                        for (j = 0; j < inputLength; ++j) {\n                            currentValue = input[j];\n                            if (currentValue < 0x80) {\n                                output.push(stringFromCharCode(currentValue));\n                            }\n                        }\n\n                        handledCPCount = basicLength = output.length;\n\n                        // `handledCPCount` is the number of code points that have been handled;\n                        // `basicLength` is the number of basic code points.\n\n                        // Finish the basic string - if it is not empty - with a delimiter\n                        if (basicLength) {\n                            output.push(delimiter);\n                        }\n\n                        // Main encoding loop:\n                        while (handledCPCount < inputLength) {\n\n                            // All non-basic code points < n have been handled already. Find the next\n                            // larger one:\n                            for (m = maxInt, j = 0; j < inputLength; ++j) {\n                                currentValue = input[j];\n                                if (currentValue >= n && currentValue < m) {\n                                    m = currentValue;\n                                }\n                            }\n\n                            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n                            // but guard against overflow\n                            handledCPCountPlusOne = handledCPCount + 1;\n                            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n                                error('overflow');\n                            }\n\n                            delta += (m - n) * handledCPCountPlusOne;\n                            n = m;\n\n                            for (j = 0; j < inputLength; ++j) {\n                                currentValue = input[j];\n\n                                if (currentValue < n && ++delta > maxInt) {\n                                    error('overflow');\n                                }\n\n                                if (currentValue == n) {\n                                    // Represent delta as a generalized variable-length integer\n                                    for (q = delta, k = base;; /* no condition */k += base) {\n                                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                                        if (q < t) {\n                                            break;\n                                        }\n                                        qMinusT = q - t;\n                                        baseMinusT = base - t;\n                                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                                        q = floor(qMinusT / baseMinusT);\n                                    }\n\n                                    output.push(stringFromCharCode(digitToBasic(q, 0)));\n                                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n                                    delta = 0;\n                                    ++handledCPCount;\n                                }\n                            }\n\n                            ++delta;\n                            ++n;\n                        }\n                        return output.join('');\n                    }\n\n                    /**\n                     * Converts a Punycode string representing a domain name or an email address\n                     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n                     * it doesn't matter if you call it on a string that has already been\n                     * converted to Unicode.\n                     * @memberOf punycode\n                     * @param {String} input The Punycoded domain name or email address to\n                     * convert to Unicode.\n                     * @returns {String} The Unicode representation of the given Punycode\n                     * string.\n                     */\n                    function toUnicode(input) {\n                        return mapDomain(input, function (string) {\n                            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n                        });\n                    }\n\n                    /**\n                     * Converts a Unicode string representing a domain name or an email address to\n                     * Punycode. Only the non-ASCII parts of the domain name will be converted,\n                     * i.e. it doesn't matter if you call it with a domain that's already in\n                     * ASCII.\n                     * @memberOf punycode\n                     * @param {String} input The domain name or email address to convert, as a\n                     * Unicode string.\n                     * @returns {String} The Punycode representation of the given domain name or\n                     * email address.\n                     */\n                    function toASCII(input) {\n                        return mapDomain(input, function (string) {\n                            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n                        });\n                    }\n\n                    /*--------------------------------------------------------------------------*/\n\n                    /** Define the public API */\n                    punycode = {\n                        /**\n                         * A string representing the current Punycode.js version number.\n                         * @memberOf punycode\n                         * @type String\n                         */\n                        'version': '1.4.1',\n                        /**\n                         * An object of methods to convert from JavaScript's internal character\n                         * representation (UCS-2) to Unicode code points, and back.\n                         * @see <https://mathiasbynens.be/notes/javascript-encoding>\n                         * @memberOf punycode\n                         * @type Object\n                         */\n                        'ucs2': {\n                            'decode': ucs2decode,\n                            'encode': ucs2encode\n                        },\n                        'decode': decode,\n                        'encode': encode,\n                        'toASCII': toASCII,\n                        'toUnicode': toUnicode\n                    };\n\n                    /** Expose `punycode` */\n                    // Some AMD build optimizers, like r.js, check for specific condition patterns\n                    // like the following:\n                    if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {\n                        define('punycode', function () {\n                            return punycode;\n                        });\n                    } else if (freeExports && freeModule) {\n                        if (module.exports == freeExports) {\n                            // in Node.js, io.js, or RingoJS v0.8.0+\n                            freeModule.exports = punycode;\n                        } else {\n                            // in Narwhal or RingoJS v0.7.0-\n                            for (key in punycode) {\n                                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n                            }\n                        }\n                    } else {\n                        // in Rhino or a web browser\n                        root.punycode = punycode;\n                    }\n                })(this);\n            }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n        }, {}], 2: [function (require, module, exports) {\n            // Copyright Joyent, Inc. and other Node contributors.\n            //\n            // Permission is hereby granted, free of charge, to any person obtaining a\n            // copy of this software and associated documentation files (the\n            // \"Software\"), to deal in the Software without restriction, including\n            // without limitation the rights to use, copy, modify, merge, publish,\n            // distribute, sublicense, and/or sell copies of the Software, and to permit\n            // persons to whom the Software is furnished to do so, subject to the\n            // following conditions:\n            //\n            // The above copyright notice and this permission notice shall be included\n            // in all copies or substantial portions of the Software.\n            //\n            // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n            // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n            'use strict';\n\n            // If obj.hasOwnProperty has been overridden, then calling\n            // obj.hasOwnProperty(prop) will break.\n            // See: https://github.com/joyent/node/issues/1707\n\n            function hasOwnProperty(obj, prop) {\n                return Object.prototype.hasOwnProperty.call(obj, prop);\n            }\n\n            module.exports = function (qs, sep, eq, options) {\n                sep = sep || '&';\n                eq = eq || '=';\n                var obj = {};\n\n                if (typeof qs !== 'string' || qs.length === 0) {\n                    return obj;\n                }\n\n                var regexp = /\\+/g;\n                qs = qs.split(sep);\n\n                var maxKeys = 1000;\n                if (options && typeof options.maxKeys === 'number') {\n                    maxKeys = options.maxKeys;\n                }\n\n                var len = qs.length;\n                // maxKeys <= 0 means that we should not limit keys count\n                if (maxKeys > 0 && len > maxKeys) {\n                    len = maxKeys;\n                }\n\n                for (var i = 0; i < len; ++i) {\n                    var x = qs[i].replace(regexp, '%20'),\n                        idx = x.indexOf(eq),\n                        kstr,\n                        vstr,\n                        k,\n                        v;\n\n                    if (idx >= 0) {\n                        kstr = x.substr(0, idx);\n                        vstr = x.substr(idx + 1);\n                    } else {\n                        kstr = x;\n                        vstr = '';\n                    }\n\n                    k = decodeURIComponent(kstr);\n                    v = decodeURIComponent(vstr);\n\n                    if (!hasOwnProperty(obj, k)) {\n                        obj[k] = v;\n                    } else if (isArray(obj[k])) {\n                        obj[k].push(v);\n                    } else {\n                        obj[k] = [obj[k], v];\n                    }\n                }\n\n                return obj;\n            };\n\n            var isArray = Array.isArray || function (xs) {\n                return Object.prototype.toString.call(xs) === '[object Array]';\n            };\n        }, {}], 3: [function (require, module, exports) {\n            // Copyright Joyent, Inc. and other Node contributors.\n            //\n            // Permission is hereby granted, free of charge, to any person obtaining a\n            // copy of this software and associated documentation files (the\n            // \"Software\"), to deal in the Software without restriction, including\n            // without limitation the rights to use, copy, modify, merge, publish,\n            // distribute, sublicense, and/or sell copies of the Software, and to permit\n            // persons to whom the Software is furnished to do so, subject to the\n            // following conditions:\n            //\n            // The above copyright notice and this permission notice shall be included\n            // in all copies or substantial portions of the Software.\n            //\n            // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n            // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n            'use strict';\n\n            var stringifyPrimitive = function stringifyPrimitive(v) {\n                switch (typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) {\n                    case 'string':\n                        return v;\n\n                    case 'boolean':\n                        return v ? 'true' : 'false';\n\n                    case 'number':\n                        return isFinite(v) ? v : '';\n\n                    default:\n                        return '';\n                }\n            };\n\n            module.exports = function (obj, sep, eq, name) {\n                sep = sep || '&';\n                eq = eq || '=';\n                if (obj === null) {\n                    obj = undefined;\n                }\n\n                if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === 'object') {\n                    return map(objectKeys(obj), function (k) {\n                        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n                        if (isArray(obj[k])) {\n                            return map(obj[k], function (v) {\n                                return ks + encodeURIComponent(stringifyPrimitive(v));\n                            }).join(sep);\n                        } else {\n                            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n                        }\n                    }).join(sep);\n                }\n\n                if (!name) return '';\n                return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n            };\n\n            var isArray = Array.isArray || function (xs) {\n                return Object.prototype.toString.call(xs) === '[object Array]';\n            };\n\n            function map(xs, f) {\n                if (xs.map) return xs.map(f);\n                var res = [];\n                for (var i = 0; i < xs.length; i++) {\n                    res.push(f(xs[i], i));\n                }\n                return res;\n            }\n\n            var objectKeys = Object.keys || function (obj) {\n                var res = [];\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n                }\n                return res;\n            };\n        }, {}], 4: [function (require, module, exports) {\n            'use strict';\n\n            exports.decode = exports.parse = require('./decode');\n            exports.encode = exports.stringify = require('./encode');\n        }, { \"./decode\": 2, \"./encode\": 3 }], 5: [function (require, module, exports) {\n            // Copyright Joyent, Inc. and other Node contributors.\n            //\n            // Permission is hereby granted, free of charge, to any person obtaining a\n            // copy of this software and associated documentation files (the\n            // \"Software\"), to deal in the Software without restriction, including\n            // without limitation the rights to use, copy, modify, merge, publish,\n            // distribute, sublicense, and/or sell copies of the Software, and to permit\n            // persons to whom the Software is furnished to do so, subject to the\n            // following conditions:\n            //\n            // The above copyright notice and this permission notice shall be included\n            // in all copies or substantial portions of the Software.\n            //\n            // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n            // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n            'use strict';\n\n            var punycode = require('punycode');\n            var util = require('./util');\n\n            exports.parse = urlParse;\n            exports.resolve = urlResolve;\n            exports.resolveObject = urlResolveObject;\n            exports.format = urlFormat;\n\n            exports.Url = Url;\n\n            function Url() {\n                this.protocol = null;\n                this.slashes = null;\n                this.auth = null;\n                this.host = null;\n                this.port = null;\n                this.hostname = null;\n                this.hash = null;\n                this.search = null;\n                this.query = null;\n                this.pathname = null;\n                this.path = null;\n                this.href = null;\n            }\n\n            // Reference: RFC 3986, RFC 1808, RFC 2396\n\n            // define these here so at least they only have to be\n            // compiled once on the first module load.\n            var protocolPattern = /^([a-z0-9.+-]+:)/i,\n                portPattern = /:[0-9]*$/,\n\n\n            // Special case for a simple path URL\n            simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n\n            // RFC 2396: characters reserved for delimiting URLs.\n            // We actually just auto-escape these.\n            delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n\n            // RFC 2396: characters not allowed for various reasons.\n            unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n\n            // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n            autoEscape = ['\\''].concat(unwise),\n\n            // Characters that are never ever allowed in a hostname.\n            // Note that any invalid chars are also handled, but these\n            // are the ones that are *expected* to be seen, so we fast-path\n            // them.\n            nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n                hostEndingChars = ['/', '?', '#'],\n                hostnameMaxLen = 255,\n                hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n                hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n\n            // protocols that can allow \"unsafe\" and \"unwise\" chars.\n            unsafeProtocol = {\n                'javascript': true,\n                'javascript:': true\n            },\n\n            // protocols that never have a hostname.\n            hostlessProtocol = {\n                'javascript': true,\n                'javascript:': true\n            },\n\n            // protocols that always contain a // bit.\n            slashedProtocol = {\n                'http': true,\n                'https': true,\n                'ftp': true,\n                'gopher': true,\n                'file': true,\n                'http:': true,\n                'https:': true,\n                'ftp:': true,\n                'gopher:': true,\n                'file:': true\n            },\n                querystring = require('querystring');\n\n            function urlParse(url, parseQueryString, slashesDenoteHost) {\n                if (url && util.isObject(url) && url instanceof Url) return url;\n\n                var u = new Url();\n                u.parse(url, parseQueryString, slashesDenoteHost);\n                return u;\n            }\n\n            Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n                if (!util.isString(url)) {\n                    throw new TypeError(\"Parameter 'url' must be a string, not \" + (typeof url === \"undefined\" ? \"undefined\" : _typeof(url)));\n                }\n\n                // Copy chrome, IE, opera backslash-handling behavior.\n                // Back slashes before the query string get converted to forward slashes\n                // See: https://code.google.com/p/chromium/issues/detail?id=25916\n                var queryIndex = url.indexOf('?'),\n                    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n                    uSplit = url.split(splitter),\n                    slashRegex = /\\\\/g;\n                uSplit[0] = uSplit[0].replace(slashRegex, '/');\n                url = uSplit.join(splitter);\n\n                var rest = url;\n\n                // trim before proceeding.\n                // This is to support parse stuff like \"  http://foo.com  \\n\"\n                rest = rest.trim();\n\n                if (!slashesDenoteHost && url.split('#').length === 1) {\n                    // Try fast path regexp\n                    var simplePath = simplePathPattern.exec(rest);\n                    if (simplePath) {\n                        this.path = rest;\n                        this.href = rest;\n                        this.pathname = simplePath[1];\n                        if (simplePath[2]) {\n                            this.search = simplePath[2];\n                            if (parseQueryString) {\n                                this.query = querystring.parse(this.search.substr(1));\n                            } else {\n                                this.query = this.search.substr(1);\n                            }\n                        } else if (parseQueryString) {\n                            this.search = '';\n                            this.query = {};\n                        }\n                        return this;\n                    }\n                }\n\n                var proto = protocolPattern.exec(rest);\n                if (proto) {\n                    proto = proto[0];\n                    var lowerProto = proto.toLowerCase();\n                    this.protocol = lowerProto;\n                    rest = rest.substr(proto.length);\n                }\n\n                // figure out if it's got a host\n                // user@server is *always* interpreted as a hostname, and url\n                // resolution will treat //foo/bar as host=foo,path=bar because that's\n                // how the browser resolves relative URLs.\n                if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n                    var slashes = rest.substr(0, 2) === '//';\n                    if (slashes && !(proto && hostlessProtocol[proto])) {\n                        rest = rest.substr(2);\n                        this.slashes = true;\n                    }\n                }\n\n                if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n\n                    // there's a hostname.\n                    // the first instance of /, ?, ;, or # ends the host.\n                    //\n                    // If there is an @ in the hostname, then non-host chars *are* allowed\n                    // to the left of the last @ sign, unless some host-ending character\n                    // comes *before* the @-sign.\n                    // URLs are obnoxious.\n                    //\n                    // ex:\n                    // http://a@b@c/ => user:a@b host:c\n                    // http://a@b?@c => user:a host:c path:/?@c\n\n                    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n                    // Review our test case against browsers more comprehensively.\n\n                    // find the first instance of any hostEndingChars\n                    var hostEnd = -1;\n                    for (var i = 0; i < hostEndingChars.length; i++) {\n                        var hec = rest.indexOf(hostEndingChars[i]);\n                        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n                    }\n\n                    // at this point, either we have an explicit point where the\n                    // auth portion cannot go past, or the last @ char is the decider.\n                    var auth, atSign;\n                    if (hostEnd === -1) {\n                        // atSign can be anywhere.\n                        atSign = rest.lastIndexOf('@');\n                    } else {\n                        // atSign must be in auth portion.\n                        // http://a@b/c@d => host:b auth:a path:/c@d\n                        atSign = rest.lastIndexOf('@', hostEnd);\n                    }\n\n                    // Now we have a portion which is definitely the auth.\n                    // Pull that off.\n                    if (atSign !== -1) {\n                        auth = rest.slice(0, atSign);\n                        rest = rest.slice(atSign + 1);\n                        this.auth = decodeURIComponent(auth);\n                    }\n\n                    // the host is the remaining to the left of the first non-host char\n                    hostEnd = -1;\n                    for (var i = 0; i < nonHostChars.length; i++) {\n                        var hec = rest.indexOf(nonHostChars[i]);\n                        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n                    }\n                    // if we still have not hit it, then the entire thing is a host.\n                    if (hostEnd === -1) hostEnd = rest.length;\n\n                    this.host = rest.slice(0, hostEnd);\n                    rest = rest.slice(hostEnd);\n\n                    // pull out port.\n                    this.parseHost();\n\n                    // we've indicated that there is a hostname,\n                    // so even if it's empty, it has to be present.\n                    this.hostname = this.hostname || '';\n\n                    // if hostname begins with [ and ends with ]\n                    // assume that it's an IPv6 address.\n                    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n                    // validate a little.\n                    if (!ipv6Hostname) {\n                        var hostparts = this.hostname.split(/\\./);\n                        for (var i = 0, l = hostparts.length; i < l; i++) {\n                            var part = hostparts[i];\n                            if (!part) continue;\n                            if (!part.match(hostnamePartPattern)) {\n                                var newpart = '';\n                                for (var j = 0, k = part.length; j < k; j++) {\n                                    if (part.charCodeAt(j) > 127) {\n                                        // we replace non-ASCII char with a temporary placeholder\n                                        // we need this to make sure size of hostname is not\n                                        // broken by replacing non-ASCII by nothing\n                                        newpart += 'x';\n                                    } else {\n                                        newpart += part[j];\n                                    }\n                                }\n                                // we test again with ASCII char only\n                                if (!newpart.match(hostnamePartPattern)) {\n                                    var validParts = hostparts.slice(0, i);\n                                    var notHost = hostparts.slice(i + 1);\n                                    var bit = part.match(hostnamePartStart);\n                                    if (bit) {\n                                        validParts.push(bit[1]);\n                                        notHost.unshift(bit[2]);\n                                    }\n                                    if (notHost.length) {\n                                        rest = '/' + notHost.join('.') + rest;\n                                    }\n                                    this.hostname = validParts.join('.');\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.hostname.length > hostnameMaxLen) {\n                        this.hostname = '';\n                    } else {\n                        // hostnames are always lower case.\n                        this.hostname = this.hostname.toLowerCase();\n                    }\n\n                    if (!ipv6Hostname) {\n                        // IDNA Support: Returns a punycoded representation of \"domain\".\n                        // It only converts parts of the domain name that\n                        // have non-ASCII characters, i.e. it doesn't matter if\n                        // you call it with a domain that already is ASCII-only.\n                        this.hostname = punycode.toASCII(this.hostname);\n                    }\n\n                    var p = this.port ? ':' + this.port : '';\n                    var h = this.hostname || '';\n                    this.host = h + p;\n                    this.href += this.host;\n\n                    // strip [ and ] from the hostname\n                    // the host field still retains them, though\n                    if (ipv6Hostname) {\n                        this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n                        if (rest[0] !== '/') {\n                            rest = '/' + rest;\n                        }\n                    }\n                }\n\n                // now rest is set to the post-host stuff.\n                // chop off any delim chars.\n                if (!unsafeProtocol[lowerProto]) {\n\n                    // First, make 100% sure that any \"autoEscape\" chars get\n                    // escaped, even if encodeURIComponent doesn't think they\n                    // need to be.\n                    for (var i = 0, l = autoEscape.length; i < l; i++) {\n                        var ae = autoEscape[i];\n                        if (rest.indexOf(ae) === -1) continue;\n                        var esc = encodeURIComponent(ae);\n                        if (esc === ae) {\n                            esc = escape(ae);\n                        }\n                        rest = rest.split(ae).join(esc);\n                    }\n                }\n\n                // chop off from the tail first.\n                var hash = rest.indexOf('#');\n                if (hash !== -1) {\n                    // got a fragment string.\n                    this.hash = rest.substr(hash);\n                    rest = rest.slice(0, hash);\n                }\n                var qm = rest.indexOf('?');\n                if (qm !== -1) {\n                    this.search = rest.substr(qm);\n                    this.query = rest.substr(qm + 1);\n                    if (parseQueryString) {\n                        this.query = querystring.parse(this.query);\n                    }\n                    rest = rest.slice(0, qm);\n                } else if (parseQueryString) {\n                    // no query string, but parseQueryString still requested\n                    this.search = '';\n                    this.query = {};\n                }\n                if (rest) this.pathname = rest;\n                if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n                    this.pathname = '/';\n                }\n\n                //to support http.request\n                if (this.pathname || this.search) {\n                    var p = this.pathname || '';\n                    var s = this.search || '';\n                    this.path = p + s;\n                }\n\n                // finally, reconstruct the href based on what has been validated.\n                this.href = this.format();\n                return this;\n            };\n\n            // format a parsed object into a url string\n            function urlFormat(obj) {\n                // ensure it's an object, and not a string url.\n                // If it's an obj, this is a no-op.\n                // this way, you can call url_format() on strings\n                // to clean up potentially wonky urls.\n                if (util.isString(obj)) obj = urlParse(obj);\n                if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n                return obj.format();\n            }\n\n            Url.prototype.format = function () {\n                var auth = this.auth || '';\n                if (auth) {\n                    auth = encodeURIComponent(auth);\n                    auth = auth.replace(/%3A/i, ':');\n                    auth += '@';\n                }\n\n                var protocol = this.protocol || '',\n                    pathname = this.pathname || '',\n                    hash = this.hash || '',\n                    host = false,\n                    query = '';\n\n                if (this.host) {\n                    host = auth + this.host;\n                } else if (this.hostname) {\n                    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n                    if (this.port) {\n                        host += ':' + this.port;\n                    }\n                }\n\n                if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\n                    query = querystring.stringify(this.query);\n                }\n\n                var search = this.search || query && '?' + query || '';\n\n                if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n                // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n                // unless they had them to begin with.\n                if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n                    host = '//' + (host || '');\n                    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n                } else if (!host) {\n                    host = '';\n                }\n\n                if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n                if (search && search.charAt(0) !== '?') search = '?' + search;\n\n                pathname = pathname.replace(/[?#]/g, function (match) {\n                    return encodeURIComponent(match);\n                });\n                search = search.replace('#', '%23');\n\n                return protocol + host + pathname + search + hash;\n            };\n\n            function urlResolve(source, relative) {\n                return urlParse(source, false, true).resolve(relative);\n            }\n\n            Url.prototype.resolve = function (relative) {\n                return this.resolveObject(urlParse(relative, false, true)).format();\n            };\n\n            function urlResolveObject(source, relative) {\n                if (!source) return relative;\n                return urlParse(source, false, true).resolveObject(relative);\n            }\n\n            Url.prototype.resolveObject = function (relative) {\n                if (util.isString(relative)) {\n                    var rel = new Url();\n                    rel.parse(relative, false, true);\n                    relative = rel;\n                }\n\n                var result = new Url();\n                var tkeys = Object.keys(this);\n                for (var tk = 0; tk < tkeys.length; tk++) {\n                    var tkey = tkeys[tk];\n                    result[tkey] = this[tkey];\n                }\n\n                // hash is always overridden, no matter what.\n                // even href=\"\" will remove it.\n                result.hash = relative.hash;\n\n                // if the relative url is empty, then there's nothing left to do here.\n                if (relative.href === '') {\n                    result.href = result.format();\n                    return result;\n                }\n\n                // hrefs like //foo/bar always cut to the protocol.\n                if (relative.slashes && !relative.protocol) {\n                    // take everything except the protocol from relative\n                    var rkeys = Object.keys(relative);\n                    for (var rk = 0; rk < rkeys.length; rk++) {\n                        var rkey = rkeys[rk];\n                        if (rkey !== 'protocol') result[rkey] = relative[rkey];\n                    }\n\n                    //urlParse appends trailing / to urls like http://www.example.com\n                    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n                        result.path = result.pathname = '/';\n                    }\n\n                    result.href = result.format();\n                    return result;\n                }\n\n                if (relative.protocol && relative.protocol !== result.protocol) {\n                    // if it's a known url protocol, then changing\n                    // the protocol does weird things\n                    // first, if it's not file:, then we MUST have a host,\n                    // and if there was a path\n                    // to begin with, then we MUST have a path.\n                    // if it is file:, then the host is dropped,\n                    // because that's known to be hostless.\n                    // anything else is assumed to be absolute.\n                    if (!slashedProtocol[relative.protocol]) {\n                        var keys = Object.keys(relative);\n                        for (var v = 0; v < keys.length; v++) {\n                            var k = keys[v];\n                            result[k] = relative[k];\n                        }\n                        result.href = result.format();\n                        return result;\n                    }\n\n                    result.protocol = relative.protocol;\n                    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n                        var relPath = (relative.pathname || '').split('/');\n                        while (relPath.length && !(relative.host = relPath.shift())) {}\n                        if (!relative.host) relative.host = '';\n                        if (!relative.hostname) relative.hostname = '';\n                        if (relPath[0] !== '') relPath.unshift('');\n                        if (relPath.length < 2) relPath.unshift('');\n                        result.pathname = relPath.join('/');\n                    } else {\n                        result.pathname = relative.pathname;\n                    }\n                    result.search = relative.search;\n                    result.query = relative.query;\n                    result.host = relative.host || '';\n                    result.auth = relative.auth;\n                    result.hostname = relative.hostname || relative.host;\n                    result.port = relative.port;\n                    // to support http.request\n                    if (result.pathname || result.search) {\n                        var p = result.pathname || '';\n                        var s = result.search || '';\n                        result.path = p + s;\n                    }\n                    result.slashes = result.slashes || relative.slashes;\n                    result.href = result.format();\n                    return result;\n                }\n\n                var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n                    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n                    mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n                    removeAllDots = mustEndAbs,\n                    srcPath = result.pathname && result.pathname.split('/') || [],\n                    relPath = relative.pathname && relative.pathname.split('/') || [],\n                    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n                // if the url is a non-slashed url, then relative\n                // links like ../.. should be able\n                // to crawl up to the hostname, as well.  This is strange.\n                // result.protocol has already been set by now.\n                // Later on, put the first path part into the host field.\n                if (psychotic) {\n                    result.hostname = '';\n                    result.port = null;\n                    if (result.host) {\n                        if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n                    }\n                    result.host = '';\n                    if (relative.protocol) {\n                        relative.hostname = null;\n                        relative.port = null;\n                        if (relative.host) {\n                            if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n                        }\n                        relative.host = null;\n                    }\n                    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n                }\n\n                if (isRelAbs) {\n                    // it's absolute.\n                    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n                    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n                    result.search = relative.search;\n                    result.query = relative.query;\n                    srcPath = relPath;\n                    // fall through to the dot-handling below.\n                } else if (relPath.length) {\n                    // it's relative\n                    // throw away the existing file, and take the new path instead.\n                    if (!srcPath) srcPath = [];\n                    srcPath.pop();\n                    srcPath = srcPath.concat(relPath);\n                    result.search = relative.search;\n                    result.query = relative.query;\n                } else if (!util.isNullOrUndefined(relative.search)) {\n                    // just pull out the search.\n                    // like href='?foo'.\n                    // Put this after the other two cases because it simplifies the booleans\n                    if (psychotic) {\n                        result.hostname = result.host = srcPath.shift();\n                        //occationaly the auth can get stuck only in host\n                        //this especially happens in cases like\n                        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n                        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n                        if (authInHost) {\n                            result.auth = authInHost.shift();\n                            result.host = result.hostname = authInHost.shift();\n                        }\n                    }\n                    result.search = relative.search;\n                    result.query = relative.query;\n                    //to support http.request\n                    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n                        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n                    }\n                    result.href = result.format();\n                    return result;\n                }\n\n                if (!srcPath.length) {\n                    // no path at all.  easy.\n                    // we've already handled the other stuff above.\n                    result.pathname = null;\n                    //to support http.request\n                    if (result.search) {\n                        result.path = '/' + result.search;\n                    } else {\n                        result.path = null;\n                    }\n                    result.href = result.format();\n                    return result;\n                }\n\n                // if a url ENDs in . or .., then it must get a trailing slash.\n                // however, if it ends in anything else non-slashy,\n                // then it must NOT get a trailing slash.\n                var last = srcPath.slice(-1)[0];\n                var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n\n                // strip single dots, resolve double dots to parent dir\n                // if the path tries to go above the root, `up` ends up > 0\n                var up = 0;\n                for (var i = srcPath.length; i >= 0; i--) {\n                    last = srcPath[i];\n                    if (last === '.') {\n                        srcPath.splice(i, 1);\n                    } else if (last === '..') {\n                        srcPath.splice(i, 1);\n                        up++;\n                    } else if (up) {\n                        srcPath.splice(i, 1);\n                        up--;\n                    }\n                }\n\n                // if the path is allowed to go above the root, restore leading ..s\n                if (!mustEndAbs && !removeAllDots) {\n                    for (; up--; up) {\n                        srcPath.unshift('..');\n                    }\n                }\n\n                if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n                    srcPath.unshift('');\n                }\n\n                if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n                    srcPath.push('');\n                }\n\n                var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';\n\n                // put the host back\n                if (psychotic) {\n                    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n                    //occationaly the auth can get stuck only in host\n                    //this especially happens in cases like\n                    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n                    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n                    if (authInHost) {\n                        result.auth = authInHost.shift();\n                        result.host = result.hostname = authInHost.shift();\n                    }\n                }\n\n                mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n                if (mustEndAbs && !isAbsolute) {\n                    srcPath.unshift('');\n                }\n\n                if (!srcPath.length) {\n                    result.pathname = null;\n                    result.path = null;\n                } else {\n                    result.pathname = srcPath.join('/');\n                }\n\n                //to support request.http\n                if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n                    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n                }\n                result.auth = relative.auth || result.auth;\n                result.slashes = result.slashes || relative.slashes;\n                result.href = result.format();\n                return result;\n            };\n\n            Url.prototype.parseHost = function () {\n                var host = this.host;\n                var port = portPattern.exec(host);\n                if (port) {\n                    port = port[0];\n                    if (port !== ':') {\n                        this.port = port.substr(1);\n                    }\n                    host = host.substr(0, host.length - port.length);\n                }\n                if (host) this.hostname = host;\n            };\n        }, { \"./util\": 6, \"punycode\": 1, \"querystring\": 4 }], 6: [function (require, module, exports) {\n            'use strict';\n\n            module.exports = {\n                isString: function isString(arg) {\n                    return typeof arg === 'string';\n                },\n                isObject: function isObject(arg) {\n                    return (typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg)) === 'object' && arg !== null;\n                },\n                isNull: function isNull(arg) {\n                    return arg === null;\n                },\n                isNullOrUndefined: function isNullOrUndefined(arg) {\n                    return arg == null;\n                }\n            };\n        }, {}], 7: [function (require, module, exports) {\n            \"use strict\";\n\n            Object.defineProperty(exports, \"__esModule\", { value: true });\n            var thing_description_1 = require(\"./thing-description\");\n            var TD = require(\"./thing-description\");\n            var typedjson_npm_1 = require(\"typedjson-npm\");\n            function parseTDObject(td) {\n                return parseTDString(typedjson_npm_1.TypedJSON.stringify(td, { enableTypeHints: false }));\n            }\n            exports.parseTDObject = parseTDObject;\n            function parseTDString(json) {\n                console.log(\"parseTDString() parsing\\n```\\n\" + json + \"\\n```\");\n                var td = typedjson_npm_1.TypedJSON.parse(json, thing_description_1.default);\n                console.log(\"parseTDString() found \" + td.interaction.length + \" Interaction\" + (td.interaction.length === 1 ? '' : 's'));\n                for (var _i = 0, _a = td.interaction; _i < _a.length; _i++) {\n                    var interaction = _a[_i];\n                    if (interaction.semanticTypes.indexOf(TD.InteractionPattern.Property.toString()) !== -1) {\n                        console.log(\" * Property '\" + interaction.name + \"'\");\n                        interaction.pattern = TD.InteractionPattern.Property;\n                    } else if (interaction.semanticTypes.indexOf(TD.InteractionPattern.Action.toString()) !== -1) {\n                        console.log(\" * Action '\" + interaction.name + \"'\");\n                        interaction.pattern = TD.InteractionPattern.Action;\n                    } else if (interaction.semanticTypes.indexOf(TD.InteractionPattern.Event.toString()) !== -1) {\n                        console.log(\" * Event '\" + interaction.name + \"'\");\n                        interaction.pattern = TD.InteractionPattern.Event;\n                    } else {\n                        console.error(\"parseTDString() found unknown Interaction pattern '\" + interaction.semanticTypes + \"'\");\n                    }\n                    if (td.base !== undefined) {\n                        console.log(\"parseTDString() applying base '\" + td.base + \"' to href '\" + interaction.link[0].href + \"'\");\n                        var href = interaction.link[0].href;\n                        var url = require('url');\n                        var n = td.base.indexOf(':');\n                        var pr = td.base.substr(0, n + 1);\n                        var uriTemp = td.base.replace(pr, 'http:');\n                        uriTemp = url.resolve(uriTemp, href);\n                        uriTemp = uriTemp.replace('http:', pr);\n                        interaction.link[0].href = uriTemp;\n                    }\n                }\n                return td;\n            }\n            exports.parseTDString = parseTDString;\n            function serializeTD(td) {\n                typedjson_npm_1.TypedJSON.config({ \"enableTypeHints\": false });\n                var json = typedjson_npm_1.TypedJSON.stringify(td);\n                var raw = JSON.parse(json);\n                if (td.base === null || td.base === undefined) {\n                    delete raw.base;\n                }\n                for (var _i = 0, _a = raw.interaction; _i < _a.length; _i++) {\n                    var interaction = _a[_i];\n                    if (interaction.inputData === null) {\n                        delete interaction.inputData;\n                    }\n                    if (interaction.outputData === null) {\n                        delete interaction.outputData;\n                    }\n                    if (interaction.writable === null) {\n                        delete interaction.writable;\n                    }\n                    if (interaction.outputData && interaction.outputData.required !== undefined) {\n                        console.log(\"### HOTFIX for TypedJSON ###\");\n                        var reqs = [];\n                        for (var req in interaction.outputData.required) {\n                            reqs.push(interaction.outputData.required[req]);\n                        }interaction.outputData.required = reqs;\n                    }\n                }\n                json = JSON.stringify(raw);\n                console.log(\"serializeTD() produced\\n```\\n\" + json + \"\\n```\");\n                return json;\n            }\n            exports.serializeTD = serializeTD;\n        }, { \"./thing-description\": 8, \"typedjson-npm\": 9, \"url\": 5 }], 8: [function (require, module, exports) {\n            \"use strict\";\n\n            var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n                var c = arguments.length,\n                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n                    d;\n                if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n                    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n                }return c > 3 && r && Object.defineProperty(target, key, r), r;\n            };\n            Object.defineProperty(exports, \"__esModule\", { value: true });\n            var typedjson_npm_1 = require(\"typedjson-npm\");\n            var InteractionPattern;\n            (function (InteractionPattern) {\n                InteractionPattern[InteractionPattern[\"Property\"] = 'Property'] = \"Property\";\n                InteractionPattern[InteractionPattern[\"Action\"] = 'Action'] = \"Action\";\n                InteractionPattern[InteractionPattern[\"Event\"] = 'Event'] = \"Event\";\n            })(InteractionPattern = exports.InteractionPattern || (exports.InteractionPattern = {}));\n            var InteractionLink = function () {\n                function InteractionLink() {}\n                return InteractionLink;\n            }();\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, type: String })], InteractionLink.prototype, \"href\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, type: String })], InteractionLink.prototype, \"mediaType\", void 0);\n            InteractionLink = __decorate([typedjson_npm_1.JsonObject()], InteractionLink);\n            exports.InteractionLink = InteractionLink;\n            var Interaction = function () {\n                function Interaction() {\n                    this.semanticTypes = [];\n                    this.link = [];\n                }\n                return Interaction;\n            }();\n            __decorate([typedjson_npm_1.JsonMember({ name: '@type', isRequired: true, elements: String })], Interaction.prototype, \"semanticTypes\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, type: String })], Interaction.prototype, \"name\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, elements: InteractionLink })], Interaction.prototype, \"link\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ type: Boolean })], Interaction.prototype, \"writable\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ type: Object })], Interaction.prototype, \"inputData\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ type: Object })], Interaction.prototype, \"outputData\", void 0);\n            Interaction = __decorate([typedjson_npm_1.JsonObject({ knownTypes: [InteractionLink] })], Interaction);\n            exports.Interaction = Interaction;\n            var ThingDescription = function () {\n                function ThingDescription() {\n                    this.context = ['http://w3c.github.io/wot/w3c-wot-td-context.jsonld'];\n                    this.semanticType = ['Thing'];\n                    this.interaction = [];\n                }\n                return ThingDescription;\n            }();\n            __decorate([typedjson_npm_1.JsonMember({ name: '@type', elements: String })], ThingDescription.prototype, \"semanticType\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, type: String })], ThingDescription.prototype, \"name\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ type: String })], ThingDescription.prototype, \"base\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ isRequired: true, elements: Interaction })], ThingDescription.prototype, \"interaction\", void 0);\n            __decorate([typedjson_npm_1.JsonMember({ name: '@context', elements: String })], ThingDescription.prototype, \"context\", void 0);\n            ThingDescription = __decorate([typedjson_npm_1.JsonObject({ knownTypes: [Interaction] })], ThingDescription);\n            exports.default = ThingDescription;\n        }, { \"typedjson-npm\": 9 }], 9: [function (require, module, exports) {\n            /*!\n            TypedJSON v0.2.0 - https://github.com/JohnWhiteTB/TypedJSON\n            \n            Typed JSON parsing and serializing that preserves type information. Parse JSON into actual class instances. Recommended (but not required)\n            to be used with reflect-metadata (global installation): https://github.com/rbuckton/ReflectDecorators.\n            \n            \n            The MIT License (MIT)\n            Copyright (c) 2016 John White\n            \n            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the\n            \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,\n            distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to\n            the following conditions:\n            \n            The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n            \n            THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n            MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n            CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n            SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n            */\n            (function (factory) {\n                if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n                    var v = factory(require, exports);if (v !== undefined) module.exports = v;\n                } else if (typeof define === 'function' && define.amd) {\n                    define([\"require\", \"exports\"], factory);\n                }\n            })(function (require, exports) {\n                \"use strict\";\n\n                var METADATA_FIELD_KEY = \"__typedJsonJsonObjectMetadataInformation__\";\n                var JSON;\n                if (!JSON) {\n                    JSON = {\n                        parse: function parse(sJSON) {\n                            var returnval = sJSON;\n                            if ((typeof returnval === \"undefined\" ? \"undefined\" : _typeof(returnval)) === 'object') {\n                                return returnval;\n                            } else {\n                                return eval('(' + sJSON + ')');\n                            }\n                        },\n                        stringify: function () {\n                            var toString = Object.prototype.toString;\n                            var isArray = Array.isArray || function (a) {\n                                return toString.call(a) === '[object Array]';\n                            };\n                            var escMap = { '\"': '\\\\\"', '\\\\': '\\\\\\\\', '\\b': '\\\\b', '\\f': '\\\\f', '\\n': '\\\\n', '\\r': '\\\\r', '\\t': '\\\\t' };\n                            var escFunc = function escFunc(m) {\n                                return escMap[m] || \"\\\\u\" + (m.charCodeAt(0) + 0x10000).toString(16).substr(1);\n                            };\n                            var escRE = /[\\\\\"\\u0000-\\u001F\\u2028\\u2029]/g;\n                            return function stringify(value) {\n                                if (value == null) {\n                                    return 'null';\n                                } else if (typeof value === 'number') {\n                                    return isFinite(value) ? value.toString() : 'null';\n                                } else if (typeof value === 'boolean') {\n                                    return value.toString();\n                                } else if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === 'object') {\n                                    if (typeof value.toJSON === 'function') {\n                                        return stringify(value.toJSON());\n                                    } else if (isArray(value)) {\n                                        var res = '[';\n                                        for (var i = 0; i < value.length; i++) {\n                                            res += (i ? ', ' : '') + stringify(value[i]);\n                                        }return res + ']';\n                                    } else if (toString.call(value) === '[object Object]') {\n                                        var tmp = [];\n                                        for (var k in value) {\n                                            if (value.hasOwnProperty(k)) tmp.push(stringify(k) + ': ' + stringify(value[k]));\n                                        }\n                                        return '{' + tmp.join(', ') + '}';\n                                    }\n                                }\n                                return '\"' + value.toString().replace(escRE, escFunc) + '\"';\n                            };\n                        }()\n                    };\n                }\n                var Helpers;\n                (function (Helpers) {\n                    function assign(target) {\n                        var sources = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            sources[_i - 1] = arguments[_i];\n                        }\n                        var output;\n                        var source;\n                        if (target === undefined || target === null) {\n                            throw new TypeError(\"Cannot convert undefined or null to object\");\n                        }\n                        output = Object(target);\n                        for (var i = 1; i < arguments.length; i++) {\n                            source = arguments[i];\n                            if (source !== undefined && source !== null) {\n                                for (var nextKey in source) {\n                                    if (source.hasOwnProperty(nextKey)) {\n                                        output[nextKey] = source[nextKey];\n                                    }\n                                }\n                            }\n                        }\n                        return output;\n                    }\n                    Helpers.assign = assign;\n                    function error(message) {\n                        var optionalParams = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            optionalParams[_i - 1] = arguments[_i];\n                        }\n                        if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === \"object\" && typeof console.error === \"function\") {\n                            console.error.apply(console, [message].concat(optionalParams));\n                        } else if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === \"object\" && typeof console.log === \"function\") {\n                            console.log.apply(console, [\"ERROR: \" + message].concat(optionalParams));\n                        }\n                    }\n                    Helpers.error = error;\n                    function getClassName(target) {\n                        var targetType;\n                        if (typeof target === \"function\") {\n                            targetType = target;\n                        } else if ((typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) === \"object\") {\n                            targetType = target.constructor;\n                        }\n                        if (!targetType) {\n                            return \"undefined\";\n                        }\n                        if (\"name\" in targetType && typeof targetType.name === \"string\") {\n                            return targetType.name;\n                        } else {\n                            return targetType.toString().match(/function (\\w*)/)[1];\n                        }\n                    }\n                    Helpers.getClassName = getClassName;\n                    function getDefaultValue(type) {\n                        switch (type) {\n                            case Number:\n                                return 0;\n                            case String:\n                                return \"\";\n                            case Boolean:\n                                return false;\n                            case Array:\n                                return [];\n                            default:\n                                return null;\n                        }\n                    }\n                    Helpers.getDefaultValue = getDefaultValue;\n                    function getPropertyDisplayName(target, propertyKey) {\n                        return getClassName(target) + \".\" + propertyKey.toString();\n                    }\n                    Helpers.getPropertyDisplayName = getPropertyDisplayName;\n                    function isArray(object) {\n                        if (typeof Array.isArray === \"function\") {\n                            return Array.isArray(object);\n                        } else {\n                            if (object instanceof Array) {\n                                return true;\n                            } else {\n                                return false;\n                            }\n                        }\n                    }\n                    Helpers.isArray = isArray;\n                    function isPrimitive(obj) {\n                        switch (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) {\n                            case \"string\":\n                            case \"number\":\n                            case \"boolean\":\n                                return true;\n                        }\n                        if (obj instanceof String || obj === String || obj instanceof Number || obj === Number || obj instanceof Boolean || obj === Boolean) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    Helpers.isPrimitive = isPrimitive;\n                    function isReservedMemberName(name) {\n                        return name === METADATA_FIELD_KEY;\n                    }\n                    Helpers.isReservedMemberName = isReservedMemberName;\n                    function isSubtypeOf(A, B) {\n                        var aPrototype = A.prototype;\n                        if (A === B) {\n                            return true;\n                        }\n                        while (aPrototype) {\n                            if (aPrototype instanceof B) {\n                                return true;\n                            }\n                            aPrototype = aPrototype.prototype;\n                        }\n                        return false;\n                    }\n                    Helpers.isSubtypeOf = isSubtypeOf;\n                    function log(message) {\n                        var optionalParams = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            optionalParams[_i - 1] = arguments[_i];\n                        }\n                        if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === \"object\" && typeof console.log === \"function\") {\n                            console.log.apply(console, [message].concat(optionalParams));\n                        }\n                    }\n                    Helpers.log = log;\n                    function merge(target) {\n                        var sources = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            sources[_i - 1] = arguments[_i];\n                        }\n                        var output;\n                        var source;\n                        if (target === undefined || target === null) {\n                            throw new TypeError(\"Cannot convert undefined or null to object\");\n                        }\n                        output = {};\n                        Object.keys(target).forEach(function (nextKey) {\n                            output[nextKey] = target[nextKey];\n                        });\n                        for (var i = 1; i < arguments.length; i++) {\n                            source = arguments[i];\n                            if (source !== undefined && source !== null) {\n                                for (var nextKey in source) {\n                                    if (source.hasOwnProperty(nextKey)) {\n                                        output[nextKey] = source[nextKey];\n                                    }\n                                }\n                            }\n                        }\n                        return output;\n                    }\n                    Helpers.merge = merge;\n                    function valueIsDefined(value) {\n                        if (typeof value === \"undefined\" || value === null) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    }\n                    Helpers.valueIsDefined = valueIsDefined;\n                    function warn(message) {\n                        var optionalParams = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            optionalParams[_i - 1] = arguments[_i];\n                        }\n                        if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === \"object\" && typeof console.warn === \"function\") {\n                            console.warn.apply(console, [message].concat(optionalParams));\n                        } else if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === \"object\" && typeof console.log === \"function\") {\n                            console.log.apply(console, [\"WARNING: \" + message].concat(optionalParams));\n                        }\n                    }\n                    Helpers.warn = warn;\n                })(Helpers || (Helpers = {}));\n                var JsonMemberMetadata = function () {\n                    function JsonMemberMetadata() {}\n                    return JsonMemberMetadata;\n                }();\n                var JsonObjectMetadata = function () {\n                    function JsonObjectMetadata() {\n                        this._dataMembers = {};\n                        this._knownTypes = [];\n                        this._knownTypeCache = null;\n                        this.isExplicitlyMarked = false;\n                    }\n                    JsonObjectMetadata.getJsonObjectName = function (type, inherited) {\n                        if (inherited === void 0) {\n                            inherited = true;\n                        }\n                        var metadata = this.getFromType(type, inherited);\n                        if (metadata !== null) {\n                            return metadata.className;\n                        } else {\n                            return Helpers.getClassName(type);\n                        }\n                    };\n                    JsonObjectMetadata.getFromType = function (target, inherited) {\n                        if (inherited === void 0) {\n                            inherited = true;\n                        }\n                        var targetPrototype;\n                        var metadata;\n                        if (typeof target === \"function\") {\n                            targetPrototype = target.prototype;\n                        } else {\n                            targetPrototype = target;\n                        }\n                        if (!targetPrototype) {\n                            return null;\n                        }\n                        if (targetPrototype.hasOwnProperty(METADATA_FIELD_KEY)) {\n                            metadata = targetPrototype[METADATA_FIELD_KEY];\n                        } else if (inherited && targetPrototype[METADATA_FIELD_KEY]) {\n                            metadata = targetPrototype[METADATA_FIELD_KEY];\n                        }\n                        if (metadata && metadata.isExplicitlyMarked) {\n                            return metadata;\n                        } else {\n                            return null;\n                        }\n                    };\n                    JsonObjectMetadata.getFromInstance = function (target, inherited) {\n                        if (inherited === void 0) {\n                            inherited = true;\n                        }\n                        return this.getFromType(Object.getPrototypeOf(target), inherited);\n                    };\n                    JsonObjectMetadata.getKnownTypeNameFromType = function (target) {\n                        var metadata = this.getFromType(target, false);\n                        if (metadata) {\n                            return metadata.className;\n                        } else {\n                            return Helpers.getClassName(target);\n                        }\n                    };\n                    JsonObjectMetadata.getKnownTypeNameFromInstance = function (target) {\n                        var metadata = this.getFromInstance(target, false);\n                        if (metadata) {\n                            return metadata.className;\n                        } else {\n                            return Helpers.getClassName(target.constructor);\n                        }\n                    };\n                    Object.defineProperty(JsonObjectMetadata.prototype, \"dataMembers\", {\n                        get: function get() {\n                            return this._dataMembers;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(JsonObjectMetadata.prototype, \"className\", {\n                        get: function get() {\n                            if (typeof this._className === \"string\") {\n                                return this._className;\n                            } else {\n                                return Helpers.getClassName(this.classType);\n                            }\n                        },\n                        set: function set(value) {\n                            this._className = value;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    Object.defineProperty(JsonObjectMetadata.prototype, \"knownTypes\", {\n                        get: function get() {\n                            var knownTypes;\n                            var knownTypeName;\n                            knownTypes = {};\n                            this._knownTypes.forEach(function (knownType) {\n                                knownTypeName = JsonObjectMetadata.getKnownTypeNameFromType(knownType);\n                                knownTypes[knownTypeName] = knownType;\n                            });\n                            this._knownTypeCache = knownTypes;\n                            return knownTypes;\n                        },\n                        enumerable: true,\n                        configurable: true\n                    });\n                    JsonObjectMetadata.prototype.setKnownType = function (type) {\n                        if (this._knownTypes.indexOf(type) === -1) {\n                            this._knownTypes.push(type);\n                            this._knownTypeCache = null;\n                        }\n                    };\n                    JsonObjectMetadata.prototype.addMember = function (member) {\n                        var _this = this;\n                        Object.keys(this._dataMembers).forEach(function (propertyKey) {\n                            if (_this._dataMembers[propertyKey].name === member.name) {\n                                throw new Error(\"A member with the name '\" + member.name + \"' already exists.\");\n                            }\n                        });\n                        this._dataMembers[member.key] = member;\n                    };\n                    JsonObjectMetadata.prototype.sortMembers = function () {\n                        var _this = this;\n                        var memberArray = [];\n                        Object.keys(this._dataMembers).forEach(function (propertyKey) {\n                            memberArray.push(_this._dataMembers[propertyKey]);\n                        });\n                        memberArray = memberArray.sort(this.sortMembersCompare);\n                        this._dataMembers = {};\n                        memberArray.forEach(function (dataMember) {\n                            _this._dataMembers[dataMember.key] = dataMember;\n                        });\n                    };\n                    JsonObjectMetadata.prototype.sortMembersCompare = function (a, b) {\n                        if (typeof a.order !== \"number\" && typeof b.order !== \"number\") {\n                            if (a.name < b.name) {\n                                return -1;\n                            } else if (a.name > b.name) {\n                                return 1;\n                            }\n                        } else if (typeof a.order !== \"number\") {\n                            return 1;\n                        } else if (typeof b.order !== \"number\") {\n                            return -1;\n                        } else {\n                            if (a.order < b.order) {\n                                return -1;\n                            } else if (a.order > b.order) {\n                                return 1;\n                            } else {\n                                if (a.name < b.name) {\n                                    return -1;\n                                } else if (a.name > b.name) {\n                                    return 1;\n                                }\n                            }\n                        }\n                        return 0;\n                    };\n                    return JsonObjectMetadata;\n                }();\n                function JsonObject(optionsOrTarget) {\n                    var options;\n                    if (typeof optionsOrTarget === \"function\") {\n                        options = {};\n                    } else {\n                        options = optionsOrTarget || {};\n                    }\n                    var initializer = options.initializer;\n                    var serializer = options.serializer;\n                    var decorator = function decorator(target) {\n                        var objectMetadata;\n                        var parentMetadata;\n                        var i;\n                        if (!target.prototype.hasOwnProperty(METADATA_FIELD_KEY)) {\n                            objectMetadata = new JsonObjectMetadata();\n                            if (parentMetadata = target.prototype[METADATA_FIELD_KEY]) {\n                                Object.keys(parentMetadata.dataMembers).forEach(function (memberPropertyKey) {\n                                    objectMetadata.dataMembers[memberPropertyKey] = parentMetadata.dataMembers[memberPropertyKey];\n                                });\n                                Object.keys(parentMetadata.knownTypes).forEach(function (key) {\n                                    objectMetadata.setKnownType(parentMetadata.knownTypes[key]);\n                                });\n                            }\n                            Object.defineProperty(target.prototype, METADATA_FIELD_KEY, {\n                                enumerable: false,\n                                configurable: false,\n                                writable: false,\n                                value: objectMetadata\n                            });\n                        } else {\n                            objectMetadata = target.prototype[METADATA_FIELD_KEY];\n                        }\n                        objectMetadata.classType = target;\n                        objectMetadata.isExplicitlyMarked = true;\n                        if (options.name) {\n                            objectMetadata.className = options.name;\n                        }\n                        if (options.knownTypes) {\n                            i = 0;\n                            try {\n                                options.knownTypes.forEach(function (knownType) {\n                                    if (typeof knownType === \"undefined\") {\n                                        throw new TypeError(\"Known type #\" + i++ + \" is undefined.\");\n                                    }\n                                    objectMetadata.setKnownType(knownType);\n                                });\n                            } catch (e) {\n                                Helpers.error(new TypeError(\"@JsonObject: \" + e.message + \" (on '\" + Helpers.getClassName(target) + \"')\"));\n                            }\n                        }\n                        if (typeof initializer === \"function\") {\n                            objectMetadata.initializer = initializer;\n                        }\n\n                        if (typeof serializer === \"function\") {\n                            objectMetadata.serializer = serializer;\n                        }\n                    };\n                    if (typeof optionsOrTarget === \"function\") {\n                        return decorator(optionsOrTarget);\n                    } else {\n                        return decorator;\n                    }\n                }\n                exports.JsonObject = JsonObject;\n                function jsonMemberTypeInit(metadata, propertyName, warnArray) {\n                    if (warnArray === void 0) {\n                        warnArray = false;\n                    }\n                    if (metadata.elements) {\n                        if (typeof metadata.elements === \"function\") {\n                            metadata.elements = {\n                                type: metadata.elements\n                            };\n                        }\n                        if (!metadata.type) {\n                            metadata.type = Array;\n                        }\n                    }\n                    if (metadata.type === Array) {\n                        if (!metadata.elements) {\n                            if (warnArray) {\n                                Helpers.warn(\"No valid 'elements' option was specified for '\" + propertyName + \"'.\");\n                            } else {\n                                throw new Error(\"No valid 'elements' option was specified for '\" + propertyName + \"'.\");\n                            }\n                        } else {\n                            jsonMemberTypeInit(metadata.elements, propertyName + '[]', true);\n                        }\n                    }\n                    if (typeof metadata.type !== \"function\") {\n                        throw new Error(\"No valid 'type' option was specified for '\" + propertyName + \"'.\");\n                    }\n                }\n                function jsonMemberKnownTypes(metadata) {\n                    var knownTypes = new Array();\n                    knownTypes.push(metadata.type);\n                    if (metadata.elements) {\n                        knownTypes = knownTypes.concat(jsonMemberKnownTypes(metadata.elements));\n                    }\n                    return knownTypes;\n                }\n                function JsonMember(optionsOrTarget, propertyKey) {\n                    var memberMetadata = new JsonMemberMetadata();\n                    var options;\n                    var decorator;\n                    if (typeof propertyKey === \"string\" || (typeof propertyKey === \"undefined\" ? \"undefined\" : _typeof(propertyKey)) === \"symbol\") {\n                        options = {};\n                    } else {\n                        options = optionsOrTarget || {};\n                    }\n                    decorator = function decorator(target, propertyKey) {\n                        var descriptor = Object.getOwnPropertyDescriptor(target, propertyKey.toString());\n                        ;\n                        var objectMetadata;\n                        var parentMetadata;\n                        var reflectType;\n                        var propertyName = Helpers.getPropertyDisplayName(target, propertyKey);\n                        if (typeof target === \"function\") {\n                            throw new TypeError(\"@JsonMember cannot be used on a static property ('\" + propertyName + \"').\");\n                        }\n                        if (typeof target[propertyKey] === \"function\") {\n                            throw new TypeError(\"@JsonMember cannot be used on a method property ('\" + propertyName + \"').\");\n                        }\n                        if (options.hasOwnProperty(\"elementType\")) {\n                            Helpers.warn(propertyName + \": the 'elementType' option is deprecated, use 'elements' instead.\");\n                            options.elements = options.elementType;\n                            if (options.elementType === Array) {\n                                memberMetadata.forceEnableTypeHinting = true;\n                            }\n                        }\n                        memberMetadata = Helpers.assign(memberMetadata, options);\n                        memberMetadata.key = propertyKey.toString();\n                        memberMetadata.name = options.name || propertyKey.toString();\n                        if (Helpers.isReservedMemberName(memberMetadata.name)) {\n                            throw new Error(\"@JsonMember: '\" + memberMetadata.name + \"' is a reserved name.\");\n                        }\n                        if (options.hasOwnProperty(\"type\") && typeof options.type === \"undefined\") {\n                            throw new TypeError(\"@JsonMember: 'type' of '\" + propertyName + \"' is undefined.\");\n                        }\n                        if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.getMetadata === \"function\") {\n                            reflectType = Reflect.getMetadata(\"design:type\", target, propertyKey);\n                            if (typeof reflectType === \"undefined\") {\n                                throw new TypeError(\"@JsonMember: type detected for '\" + propertyName + \"' is undefined.\");\n                            }\n                            if (!memberMetadata.type || typeof memberMetadata.type !== \"function\") {\n                                memberMetadata.type = reflectType;\n                            } else if (memberMetadata.type !== reflectType) {\n                                Helpers.warn(\"@JsonMember: 'type' specified for '\" + propertyName + \"' does not match detected type.\");\n                            }\n                        }\n                        jsonMemberTypeInit(memberMetadata, propertyName);\n                        if (!target.hasOwnProperty(METADATA_FIELD_KEY)) {\n                            objectMetadata = new JsonObjectMetadata();\n                            if (parentMetadata = target[METADATA_FIELD_KEY]) {\n                                Object.keys(parentMetadata.dataMembers).forEach(function (memberPropertyKey) {\n                                    objectMetadata.dataMembers[memberPropertyKey] = parentMetadata.dataMembers[memberPropertyKey];\n                                });\n                            }\n                            Object.defineProperty(target, METADATA_FIELD_KEY, {\n                                enumerable: false,\n                                configurable: false,\n                                writable: false,\n                                value: objectMetadata\n                            });\n                        } else {\n                            objectMetadata = target[METADATA_FIELD_KEY];\n                        }\n                        jsonMemberKnownTypes(memberMetadata).forEach(function (knownType) {\n                            objectMetadata.setKnownType(knownType);\n                        });\n                        try {\n                            objectMetadata.addMember(memberMetadata);\n                        } catch (e) {\n                            throw new Error(\"Member '\" + memberMetadata.name + \"' already exists on '\" + Helpers.getClassName(objectMetadata.classType) + \"'.\");\n                        }\n                    };\n                    if (typeof propertyKey === \"string\" || (typeof propertyKey === \"undefined\" ? \"undefined\" : _typeof(propertyKey)) === \"symbol\") {\n                        return decorator(optionsOrTarget, propertyKey);\n                    } else {\n                        return decorator;\n                    }\n                }\n                exports.JsonMember = JsonMember;\n                var Serializer = function () {\n                    function Serializer() {}\n                    Serializer.writeObject = function (object, settings) {\n                        var objectMetadata = JsonObjectMetadata.getFromInstance(object);\n                        var ObjectType;\n                        if (objectMetadata) {\n                            ObjectType = objectMetadata.classType;\n                        } else {\n                            ObjectType = object.constructor;\n                        }\n                        return JSON.stringify(this.writeToJsonObject(object, {\n                            objectType: ObjectType,\n                            enableTypeHints: settings.enableTypeHints,\n                            typeHintPropertyKey: settings.typeHintPropertyKey\n                        }), settings.replacer);\n                    };\n                    Serializer.writeToJsonObject = function (object, settings) {\n                        var _this = this;\n                        var json;\n                        var objectMetadata;\n                        if (object === null || typeof object === \"undefined\") {\n                            if (settings.emitDefault) {\n                                json = Helpers.getDefaultValue(settings.objectType);\n                            } else {\n                                json = object;\n                            }\n                        } else if (Helpers.isPrimitive(object) || object instanceof Date) {\n                            json = object;\n                        } else if (object instanceof Array) {\n                            json = [];\n                            for (var i = 0, n = object.length; i < n; i++) {\n                                json.push(this.writeToJsonObject(object[i], {\n                                    elements: settings.elements ? settings.elements.elements : null,\n                                    enableTypeHints: settings.enableTypeHints,\n                                    objectType: settings.elements ? settings.elements.type : Object,\n                                    requireTypeHints: settings.requireTypeHints,\n                                    typeHintPropertyKey: settings.typeHintPropertyKey\n                                }));\n                            }\n                        } else {\n                            objectMetadata = JsonObjectMetadata.getFromInstance(object);\n                            if (objectMetadata && typeof objectMetadata.serializer === \"function\") {\n                                json = objectMetadata.serializer(object);\n                            } else {\n                                json = {};\n                                if (settings.enableTypeHints && (settings.requireTypeHints || object.constructor !== settings.objectType)) {\n                                    json[settings.typeHintPropertyKey] = JsonObjectMetadata.getKnownTypeNameFromInstance(object);\n                                }\n                                if (objectMetadata) {\n                                    objectMetadata.sortMembers();\n                                    Object.keys(objectMetadata.dataMembers).forEach(function (propertyKey) {\n                                        var propertyMetadata = objectMetadata.dataMembers[propertyKey];\n                                        json[propertyMetadata.name] = _this.writeToJsonObject(object[propertyKey], {\n                                            elements: propertyMetadata.elements,\n                                            emitDefault: propertyMetadata.emitDefaultValue,\n                                            enableTypeHints: settings.enableTypeHints,\n                                            name: propertyMetadata.name,\n                                            objectType: propertyMetadata.type,\n                                            requireTypeHints: settings.requireTypeHints,\n                                            typeHintPropertyKey: settings.typeHintPropertyKey\n                                        });\n                                    });\n                                } else {\n                                    Object.keys(object).forEach(function (propertyKey) {\n                                        json[propertyKey] = _this.writeToJsonObject(object[propertyKey], {\n                                            enableTypeHints: settings.enableTypeHints,\n                                            objectType: Object,\n                                            requireTypeHints: settings.requireTypeHints,\n                                            typeHintPropertyKey: settings.typeHintPropertyKey\n                                        });\n                                    });\n                                }\n                            }\n                        }\n                        return json;\n                    };\n                    return Serializer;\n                }();\n                var Deserializer = function () {\n                    function Deserializer() {}\n                    Deserializer.readObject = function (json, type, settings) {\n                        var value;\n                        var instance;\n                        var metadata = JsonObjectMetadata.getFromType(type);\n                        if (typeof json === 'Object') {\n                            value = json;\n                        } else {\n                            value = JSON.parse(json, settings.reviver);\n                        }\n                        if (typeof settings.maxObjects === \"number\") {\n                            if (this.countObjects(value) > settings.maxObjects) {\n                                throw new Error(\"JSON exceeds object count limit (\" + settings.maxObjects + \").\");\n                            }\n                        }\n                        instance = this.readJsonToInstance(value, {\n                            objectType: type,\n                            typeHintPropertyKey: settings.typeHintPropertyKey,\n                            enableTypeHints: settings.enableTypeHints,\n                            strictTypeHintMode: true,\n                            knownTypes: metadata ? metadata.knownTypes : {}\n                        });\n                        return instance;\n                    };\n                    Deserializer.countObjects = function (value) {\n                        var _this = this;\n                        switch (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) {\n                            case \"object\":\n                                if (value === null) {\n                                    return 0;\n                                } else if (Helpers.isArray(value)) {\n                                    var count_1 = 0;\n                                    value.forEach(function (item) {\n                                        count_1 += _this.countObjects(item);\n                                    });\n                                    return count_1;\n                                } else {\n                                    var count_2 = 0;\n                                    Object.keys(value).forEach(function (propertyKey) {\n                                        count_2 += _this.countObjects(value[propertyKey]);\n                                    });\n                                    return count_2;\n                                }\n                            case \"undefined\":\n                                return 0;\n                            default:\n                                return 1;\n                        }\n                    };\n                    Deserializer.readJsonToInstance = function (json, settings) {\n                        var _this = this;\n                        var object;\n                        var objectMetadata;\n                        var ObjectType;\n                        var typeHint;\n                        var temp;\n                        var knownTypes;\n                        if (typeof json === \"undefined\" || json === null) {\n                            if (settings.isRequired) {\n                                throw new Error(\"Missing required member.\");\n                            }\n                        } else if (Helpers.isPrimitive(settings.objectType)) {\n                            if (json.constructor !== settings.objectType) {\n                                var expectedTypeName = Helpers.getClassName(settings.objectType).toLowerCase();\n                                var foundTypeName = Helpers.getClassName(json.constructor).toLowerCase();\n                                throw new TypeError(\"Expected value to be of type '\" + expectedTypeName + \"', got '\" + foundTypeName + \"'.\");\n                            }\n                            object = json;\n                        } else if (settings.objectType === Array) {\n                            if (!Helpers.isArray(json)) {\n                                throw new TypeError(\"Expected value to be of type 'Array', got '\" + Helpers.getClassName(json.constructor) + \"'.\");\n                            }\n                            object = [];\n                            json.forEach(function (element) {\n                                object.push(_this.readJsonToInstance(element, {\n                                    elements: settings.elements ? settings.elements.elements : null,\n                                    enableTypeHints: settings.enableTypeHints,\n                                    knownTypes: settings.knownTypes,\n                                    objectType: settings.elements ? settings.elements.type : element.constructor,\n                                    requireTypeHints: settings.requireTypeHints,\n                                    strictTypeHintMode: settings.strictTypeHintMode,\n                                    typeHintPropertyKey: settings.typeHintPropertyKey\n                                }));\n                            });\n                        } else if (settings.objectType === Date) {\n                            if (typeof json === \"string\") {\n                                object = new Date(json);\n                            } else if (json instanceof Date) {\n                                object = json;\n                            } else {\n                                throw new TypeError(\"Expected value to be of type 'string', got '\" + (typeof json === \"undefined\" ? \"undefined\" : _typeof(json)) + \"'.\");\n                            }\n                        } else {\n                            typeHint = json[settings.typeHintPropertyKey];\n                            if (typeHint && settings.enableTypeHints) {\n                                if (typeof typeHint !== \"string\") {\n                                    throw new TypeError(\"Type-hint (\" + settings.typeHintPropertyKey + \") must be a string.\");\n                                }\n                                if (!settings.knownTypes[typeHint]) {\n                                    throw new Error(\"'\" + typeHint + \"' is not a known type.\");\n                                }\n                                if (settings.strictTypeHintMode && !Helpers.isSubtypeOf(settings.knownTypes[typeHint], settings.objectType)) {\n                                    throw new Error(\"'\" + typeHint + \"' is not a subtype of '\" + Helpers.getClassName(settings.objectType) + \"'.\");\n                                }\n                                ObjectType = settings.knownTypes[typeHint];\n                                objectMetadata = JsonObjectMetadata.getFromType(ObjectType);\n                            } else {\n                                if (settings.enableTypeHints && settings.requireTypeHints) {\n                                    throw new Error(\"Missing required type-hint.\");\n                                }\n                                ObjectType = settings.objectType;\n                                objectMetadata = JsonObjectMetadata.getFromType(settings.objectType);\n                            }\n                            if (objectMetadata) {\n                                if (typeof objectMetadata.initializer === \"function\") {\n                                    object = objectMetadata.initializer(json) || null;\n                                } else {\n                                    objectMetadata.sortMembers();\n                                    object = new ObjectType();\n                                    Object.keys(objectMetadata.dataMembers).forEach(function (propertyKey) {\n                                        var propertyMetadata = objectMetadata.dataMembers[propertyKey];\n                                        temp = _this.readJsonToInstance(json[propertyMetadata.name], {\n                                            elements: propertyMetadata.elements,\n                                            enableTypeHints: settings.enableTypeHints,\n                                            isRequired: propertyMetadata.isRequired,\n                                            knownTypes: Helpers.merge(settings.knownTypes, objectMetadata.knownTypes || {}),\n                                            objectType: propertyMetadata.type,\n                                            requireTypeHints: settings.requireTypeHints,\n                                            strictTypeHintMode: settings.strictTypeHintMode,\n                                            typeHintPropertyKey: settings.typeHintPropertyKey\n                                        });\n                                        if (Helpers.valueIsDefined(temp)) {\n                                            object[propertyKey] = temp;\n                                        }\n                                    });\n                                }\n                            } else {\n                                object = {};\n                                Object.keys(json).forEach(function (propertyKey) {\n                                    if (json[propertyKey] && propertyKey !== settings.typeHintPropertyKey) {\n                                        object[propertyKey] = _this.readJsonToInstance(json[propertyKey], {\n                                            enableTypeHints: settings.enableTypeHints,\n                                            knownTypes: settings.knownTypes,\n                                            objectType: json[propertyKey].constructor,\n                                            requireTypeHints: settings.requireTypeHints,\n                                            typeHintPropertyKey: settings.typeHintPropertyKey\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                        return object;\n                    };\n                    return Deserializer;\n                }();\n                var configSettings = {\n                    enableTypeHints: true,\n                    typeHintPropertyKey: \"__type\"\n                };\n                var TypedJSON = {\n                    config: function config(settings) {\n                        configSettings = Helpers.merge(configSettings, settings);\n                    },\n                    stringify: function stringify(value, settings) {\n                        return Serializer.writeObject(value, Helpers.merge(configSettings, settings || {}));\n                    },\n                    parse: function parse(json, type, settings) {\n                        if (JsonObjectMetadata.getFromType(type)) {\n                            return Deserializer.readObject(json, type, Helpers.merge(configSettings, settings || {}));\n                        } else {\n                            return JSON.parse.apply(JSON, arguments);\n                        }\n                    }\n                };\n                exports.TypedJSON = TypedJSON;\n            });\n        }, {}] }, {}, [7])(7);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")}},[17]);