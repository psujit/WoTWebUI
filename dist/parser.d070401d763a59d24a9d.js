webpackJsonp([2],{16:function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},17:function(module,exports,__webpack_require__){(function(global){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,require,require,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){if("object"===_typeof(exports)&&void 0!==module)module.exports=e();else{__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=e,void 0!==(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}(function(){var define,module,exports;return function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){var p="function"==typeof require&&require;if(!a&&p)return require(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return o(n||e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t,n){(function(e){!function(r){function o(e){throw new RangeError(I[e])}function i(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function s(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),e=e.replace(S,"."),r+i(e.split("."),t).join(".")}function a(e){for(var t,n,r=[],o=0,i=e.length;o<i;)t=e.charCodeAt(o++),t>=55296&&t<=56319&&o<i?(n=e.charCodeAt(o++),56320==(64512&n)?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--)):r.push(t);return r}function p(e){return i(e,function(e){var t="";return e>65535&&(e-=65536,t+=q(e>>>10&1023|55296),e=56320|1023&e),t+=q(e)}).join("")}function c(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:w}function u(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function f(e,t,n){var r=0;for(e=n?x(e/A):e>>1,e+=x(e/t);e>P*O>>1;r+=w)e=x(e/P);return x(r+(P+1)*e/(e+E))}function l(e){var t,n,r,i,s,a,u,l,h,y,d=[],m=e.length,b=0,v=H,g=M;for(n=e.lastIndexOf(D),n<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&o("not-basic"),d.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<m;){for(s=b,a=1,u=w;i>=m&&o("invalid-input"),l=c(e.charCodeAt(i++)),(l>=w||l>x((_-b)/a))&&o("overflow"),b+=l*a,h=u<=g?j:u>=g+O?O:u-g,!(l<h);u+=w)y=w-h,a>x(_/y)&&o("overflow"),a*=y;t=d.length+1,g=f(b-s,t,0==s),x(b/t)>_-v&&o("overflow"),v+=x(b/t),b%=t,d.splice(b++,0,v)}return p(d)}function h(e){var t,n,r,i,s,p,c,l,h,y,d,m,b,v,g,T=[];for(e=a(e),m=e.length,t=H,n=0,s=M,p=0;p<m;++p)(d=e[p])<128&&T.push(q(d));for(r=i=T.length,i&&T.push(D);r<m;){for(c=_,p=0;p<m;++p)(d=e[p])>=t&&d<c&&(c=d);for(b=r+1,c-t>x((_-n)/b)&&o("overflow"),n+=(c-t)*b,t=c,p=0;p<m;++p)if(d=e[p],d<t&&++n>_&&o("overflow"),d==t){for(l=n,h=w;y=h<=s?j:h>=s+O?O:h-s,!(l<y);h+=w)g=l-y,v=w-y,T.push(q(u(y+g%v,0))),l=x(g/v);T.push(q(u(l,0))),s=f(n,b,r==i),n=0,++r}++n,++t}return T.join("")}function y(e){return s(e,function(e){return N.test(e)?l(e.slice(4).toLowerCase()):e})}function d(e){return s(e,function(e){return J.test(e)?"xn--"+h(e):e})}var m="object"==(void 0===n?"undefined":_typeof(n))&&n&&!n.nodeType&&n,b="object"==(void 0===t?"undefined":_typeof(t))&&t&&!t.nodeType&&t,v="object"==(void 0===e?"undefined":_typeof(e))&&e;v.global!==v&&v.window!==v&&v.self!==v||(r=v);var g,T,_=2147483647,w=36,j=1,O=26,E=38,A=700,M=72,H=128,D="-",N=/^xn--/,J=/[^\x20-\x7E]/,S=/[\x2E\u3002\uFF0E\uFF61]/g,I={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},P=w-j,x=Math.floor,q=String.fromCharCode;if(g={version:"1.4.1",ucs2:{decode:a,encode:p},decode:l,encode:h,toASCII:d,toUnicode:y},"function"==typeof define&&"object"==_typeof(define.amd)&&define.amd)define("punycode",function(){return g});else if(m&&b)if(t.exports==m)b.exports=g;else for(T in g)g.hasOwnProperty(T)&&(m[T]=g[T]);else r.punycode=g}(this)}).call(this,void 0!==global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.exports=function(e,t,n,i){t=t||"&",n=n||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var p=1e3;i&&"number"==typeof i.maxKeys&&(p=i.maxKeys);var c=e.length;p>0&&c>p&&(c=p);for(var u=0;u<c;++u){var f,l,h,y,d=e[u].replace(a,"%20"),m=d.indexOf(n);m>=0?(f=d.substr(0,m),l=d.substr(m+1)):(f=d,l=""),h=decodeURIComponent(f),y=decodeURIComponent(l),r(s,h)?o(s[h])?s[h].push(y):s[h]=[s[h],y]:s[h]=y}return s};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{}],3:[function(e,t,n){"use strict";function r(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var o=function(e){switch(void 0===e?"undefined":_typeof(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};t.exports=function(e,t,n,a){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"===(void 0===e?"undefined":_typeof(e))?r(s(e),function(s){var a=encodeURIComponent(o(s))+n;return i(e[s])?r(e[s],function(e){return a+encodeURIComponent(o(e))}).join(t):a+encodeURIComponent(o(e[s]))}).join(t):a?encodeURIComponent(o(a))+n+encodeURIComponent(o(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},s=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},{}],4:[function(e,t,n){"use strict";n.decode=n.parse=e("./decode"),n.encode=n.stringify=e("./encode")},{"./decode":2,"./encode":3}],5:[function(e,t,n){"use strict";function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function o(e,t,n){if(e&&c.isObject(e)&&e instanceof r)return e;var o=new r;return o.parse(e,t,n),o}function i(e){return c.isString(e)&&(e=o(e)),e instanceof r?e.format():r.prototype.format.call(e)}function s(e,t){return o(e,!1,!0).resolve(t)}function a(e,t){return e?o(e,!1,!0).resolveObject(t):t}var p=e("punycode"),c=e("./util");n.parse=o,n.resolve=s,n.resolveObject=a,n.format=i,n.Url=r;var u=/^([a-z0-9.+-]+:)/i,f=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,h=["<",">",'"',"`"," ","\r","\n","\t"],y=["{","}","|","\\","^","`"].concat(h),d=["'"].concat(y),m=["%","/","?",";","#"].concat(d),b=["/","?","#"],v=/^[+a-z0-9A-Z_-]{0,63}$/,g=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,T={javascript:!0,"javascript:":!0},_={javascript:!0,"javascript:":!0},w={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},j=e("querystring");r.prototype.parse=function(e,t,n){if(!c.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+(void 0===e?"undefined":_typeof(e)));var r=e.indexOf("?"),o=-1!==r&&r<e.indexOf("#")?"?":"#",i=e.split(o),s=/\\/g;i[0]=i[0].replace(s,"/"),e=i.join(o);var a=e;if(a=a.trim(),!n&&1===e.split("#").length){var f=l.exec(a);if(f)return this.path=a,this.href=a,this.pathname=f[1],f[2]?(this.search=f[2],this.query=t?j.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var h=u.exec(a);if(h){h=h[0];var y=h.toLowerCase();this.protocol=y,a=a.substr(h.length)}if(n||h||a.match(/^\/\/[^@\/]+@[^@\/]+/)){var O="//"===a.substr(0,2);!O||h&&_[h]||(a=a.substr(2),this.slashes=!0)}if(!_[h]&&(O||h&&!w[h])){for(var E=-1,A=0;A<b.length;A++){var M=a.indexOf(b[A]);-1!==M&&(-1===E||M<E)&&(E=M)}var H,D;D=-1===E?a.lastIndexOf("@"):a.lastIndexOf("@",E),-1!==D&&(H=a.slice(0,D),a=a.slice(D+1),this.auth=decodeURIComponent(H)),E=-1;for(var A=0;A<m.length;A++){var M=a.indexOf(m[A]);-1!==M&&(-1===E||M<E)&&(E=M)}-1===E&&(E=a.length),this.host=a.slice(0,E),a=a.slice(E),this.parseHost(),this.hostname=this.hostname||"";var N="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!N)for(var J=this.hostname.split(/\./),A=0,S=J.length;A<S;A++){var I=J[A];if(I&&!I.match(v)){for(var P="",x=0,q=I.length;x<q;x++)I.charCodeAt(x)>127?P+="x":P+=I[x];if(!P.match(v)){var C=J.slice(0,A),k=J.slice(A+1),K=I.match(g);K&&(C.push(K[1]),k.unshift(K[2])),k.length&&(a="/"+k.join(".")+a),this.hostname=C.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),N||(this.hostname=p.toASCII(this.hostname));var F=this.port?":"+this.port:"",R=this.hostname||"";this.host=R+F,this.href+=this.host,N&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==a[0]&&(a="/"+a))}if(!T[y])for(var A=0,S=d.length;A<S;A++){var L=d[A];if(-1!==a.indexOf(L)){var Y=encodeURIComponent(L);Y===L&&(Y=escape(L)),a=a.split(L).join(Y)}}var U=a.indexOf("#");-1!==U&&(this.hash=a.substr(U),a=a.slice(0,U));var z=a.indexOf("?");if(-1!==z?(this.search=a.substr(z),this.query=a.substr(z+1),t&&(this.query=j.parse(this.query)),a=a.slice(0,z)):t&&(this.search="",this.query={}),a&&(this.pathname=a),w[y]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var F=this.pathname||"",B=this.search||"";this.path=F+B}return this.href=this.format(),this},r.prototype.format=function(){var e=this.auth||"";e&&(e=encodeURIComponent(e),e=e.replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,i="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&c.isObject(this.query)&&Object.keys(this.query).length&&(i=j.stringify(this.query));var s=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||w[t])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}),s=s.replace("#","%23"),t+o+n+s+r},r.prototype.resolve=function(e){return this.resolveObject(o(e,!1,!0)).format()},r.prototype.resolveObject=function(e){if(c.isString(e)){var t=new r;t.parse(e,!1,!0),e=t}for(var n=new r,o=Object.keys(this),i=0;i<o.length;i++){var s=o[i];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var a=Object.keys(e),p=0;p<a.length;p++){var u=a[p];"protocol"!==u&&(n[u]=e[u])}return w[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!w[e.protocol]){for(var f=Object.keys(e),l=0;l<f.length;l++){var h=f[l];n[h]=e[h]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||_[e.protocol])n.pathname=e.pathname;else{for(var y=(e.pathname||"").split("/");y.length&&!(e.host=y.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==y[0]&&y.unshift(""),y.length<2&&y.unshift(""),n.pathname=y.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var d=n.pathname||"",m=n.search||"";n.path=d+m}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),g=v||b||n.host&&e.pathname,T=g,j=n.pathname&&n.pathname.split("/")||[],y=e.pathname&&e.pathname.split("/")||[],O=n.protocol&&!w[n.protocol];if(O&&(n.hostname="",n.port=null,n.host&&(""===j[0]?j[0]=n.host:j.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===y[0]?y[0]=e.host:y.unshift(e.host)),e.host=null),g=g&&(""===y[0]||""===j[0])),v)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,j=y;else if(y.length)j||(j=[]),j.pop(),j=j.concat(y),n.search=e.search,n.query=e.query;else if(!c.isNullOrUndefined(e.search)){if(O){n.hostname=n.host=j.shift();var E=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");E&&(n.auth=E.shift(),n.host=n.hostname=E.shift())}return n.search=e.search,n.query=e.query,c.isNull(n.pathname)&&c.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!j.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var A=j.slice(-1)[0],M=(n.host||e.host||j.length>1)&&("."===A||".."===A)||""===A,H=0,D=j.length;D>=0;D--)A=j[D],"."===A?j.splice(D,1):".."===A?(j.splice(D,1),H++):H&&(j.splice(D,1),H--);if(!g&&!T)for(;H--;H)j.unshift("..");!g||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),M&&"/"!==j.join("/").substr(-1)&&j.push("");var N=""===j[0]||j[0]&&"/"===j[0].charAt(0);if(O){n.hostname=n.host=N?"":j.length?j.shift():"";var E=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@");E&&(n.auth=E.shift(),n.host=n.hostname=E.shift())}return g=g||n.host&&j.length,g&&!N&&j.unshift(""),j.length?n.pathname=j.join("/"):(n.pathname=null,n.path=null),c.isNull(n.pathname)&&c.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},r.prototype.parseHost=function(){var e=this.host,t=f.exec(e);t&&(t=t[0],":"!==t&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},{"./util":6,punycode:1,querystring:4}],6:[function(e,t,n){"use strict";t.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"===(void 0===e?"undefined":_typeof(e))&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},{}],7:[function(e,t,n){"use strict";function r(e){return o(p.TypedJSON.stringify(e,{enableTypeHints:!1}))}function o(t){console.log("parseTDString() parsing\n```\n"+t+"\n```");var n=p.TypedJSON.parse(t,s.default);console.log("parseTDString() found "+n.interaction.length+" Interaction"+(1===n.interaction.length?"":"s"));for(var r=0,o=n.interaction;r<o.length;r++){var i=o[r];if(-1!==i.semanticTypes.indexOf(a.InteractionPattern.Property.toString())?(console.log(" * Property '"+i.name+"'"),i.pattern=a.InteractionPattern.Property):-1!==i.semanticTypes.indexOf(a.InteractionPattern.Action.toString())?(console.log(" * Action '"+i.name+"'"),i.pattern=a.InteractionPattern.Action):-1!==i.semanticTypes.indexOf(a.InteractionPattern.Event.toString())?(console.log(" * Event '"+i.name+"'"),i.pattern=a.InteractionPattern.Event):console.error("parseTDString() found unknown Interaction pattern '"+i.semanticTypes+"'"),void 0!==n.base){console.log("parseTDString() applying base '"+n.base+"' to href '"+i.link[0].href+"'");var c=i.link[0].href,u=e("url"),f=n.base.indexOf(":"),l=n.base.substr(0,f+1),h=n.base.replace(l,"http:");h=u.resolve(h,c),h=h.replace("http:",l),i.link[0].href=h}}return n}function i(e){p.TypedJSON.config({enableTypeHints:!1});var t=p.TypedJSON.stringify(e),n=JSON.parse(t);null!==e.base&&void 0!==e.base||delete n.base;for(var r=0,o=n.interaction;r<o.length;r++){var i=o[r];if(null===i.inputData&&delete i.inputData,null===i.outputData&&delete i.outputData,null===i.writable&&delete i.writable,i.outputData&&void 0!==i.outputData.required){console.log("### HOTFIX for TypedJSON ###");var s=[];for(var a in i.outputData.required)s.push(i.outputData.required[a]);i.outputData.required=s}}return t=JSON.stringify(n),console.log("serializeTD() produced\n```\n"+t+"\n```"),t}Object.defineProperty(n,"__esModule",{value:!0});var s=e("./thing-description"),a=e("./thing-description"),p=e("typedjson-npm");n.parseTDObject=r,n.parseTDString=o,n.serializeTD=i},{"./thing-description":8,"typedjson-npm":9,url:5}],8:[function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":_typeof(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(n,"__esModule",{value:!0});var o=e("typedjson-npm");!function(e){e[e.Property="Property"]="Property",e[e.Action="Action"]="Action",e[e.Event="Event"]="Event"}(n.InteractionPattern||(n.InteractionPattern={}));var i=function(){function e(){}return e}();r([o.JsonMember({isRequired:!0,type:String})],i.prototype,"href",void 0),r([o.JsonMember({isRequired:!0,type:String})],i.prototype,"mediaType",void 0),i=r([o.JsonObject()],i),n.InteractionLink=i;var s=function(){function e(){this.semanticTypes=[],this.link=[]}return e}();r([o.JsonMember({name:"@type",isRequired:!0,elements:String})],s.prototype,"semanticTypes",void 0),r([o.JsonMember({isRequired:!0,type:String})],s.prototype,"name",void 0),r([o.JsonMember({isRequired:!0,elements:i})],s.prototype,"link",void 0),r([o.JsonMember({type:Boolean})],s.prototype,"writable",void 0),r([o.JsonMember({type:Object})],s.prototype,"inputData",void 0),r([o.JsonMember({type:Object})],s.prototype,"outputData",void 0),s=r([o.JsonObject({knownTypes:[i]})],s),n.Interaction=s;var a=function(){function e(){this.context=["http://w3c.github.io/wot/w3c-wot-td-context.jsonld"],this.semanticType=["Thing"],this.interaction=[]}return e}();r([o.JsonMember({name:"@type",elements:String})],a.prototype,"semanticType",void 0),r([o.JsonMember({isRequired:!0,type:String})],a.prototype,"name",void 0),r([o.JsonMember({type:String})],a.prototype,"base",void 0),r([o.JsonMember({isRequired:!0,elements:s})],a.prototype,"interaction",void 0),r([o.JsonMember({name:"@context",elements:String})],a.prototype,"context",void 0),a=r([o.JsonObject({knownTypes:[s]})],a),n.default=a},{"typedjson-npm":9}],9:[function(require,module,exports){/*!
            TypedJSON v0.2.0 - https://github.com/JohnWhiteTB/TypedJSON
            
            Typed JSON parsing and serializing that preserves type information. Parse JSON into actual class instances. Recommended (but not required)
            to be used with reflect-metadata (global installation): https://github.com/rbuckton/ReflectDecorators.
            
            
            The MIT License (MIT)
            Copyright (c) 2016 John White
            
            Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the
            "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,
            distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
            the following conditions:
            
            The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
            CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
            SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
            */
!function(e){if("object"===(void 0===module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)){var t=e(require,exports);void 0!==t&&(module.exports=t)}else"function"==typeof define&&define.amd&&define(["require","exports"],e)}(function(require,exports){"use strict";function JsonObject(e){var t;t="function"==typeof e?{}:e||{};var n=t.initializer,r=t.serializer,o=function(e){var o,i,s;if(e.prototype.hasOwnProperty(METADATA_FIELD_KEY)?o=e.prototype[METADATA_FIELD_KEY]:(o=new JsonObjectMetadata,(i=e.prototype[METADATA_FIELD_KEY])&&(Object.keys(i.dataMembers).forEach(function(e){o.dataMembers[e]=i.dataMembers[e]}),Object.keys(i.knownTypes).forEach(function(e){o.setKnownType(i.knownTypes[e])})),Object.defineProperty(e.prototype,METADATA_FIELD_KEY,{enumerable:!1,configurable:!1,writable:!1,value:o})),o.classType=e,o.isExplicitlyMarked=!0,t.name&&(o.className=t.name),t.knownTypes){s=0;try{t.knownTypes.forEach(function(e){if(void 0===e)throw new TypeError("Known type #"+s+++" is undefined.");o.setKnownType(e)})}catch(t){Helpers.error(new TypeError("@JsonObject: "+t.message+" (on '"+Helpers.getClassName(e)+"')"))}}"function"==typeof n&&(o.initializer=n),"function"==typeof r&&(o.serializer=r)};return"function"==typeof e?o(e):o}function jsonMemberTypeInit(e,t,n){if(void 0===n&&(n=!1),e.elements&&("function"==typeof e.elements&&(e.elements={type:e.elements}),e.type||(e.type=Array)),e.type===Array)if(e.elements)jsonMemberTypeInit(e.elements,t+"[]",!0);else{if(!n)throw new Error("No valid 'elements' option was specified for '"+t+"'.");Helpers.warn("No valid 'elements' option was specified for '"+t+"'.")}if("function"!=typeof e.type)throw new Error("No valid 'type' option was specified for '"+t+"'.")}function jsonMemberKnownTypes(e){var t=new Array;return t.push(e.type),e.elements&&(t=t.concat(jsonMemberKnownTypes(e.elements))),t}function JsonMember(e,t){var n,r,o=new JsonMemberMetadata;return n="string"==typeof t||"symbol"===(void 0===t?"undefined":_typeof(t))?{}:e||{},r=function(e,t){var r,i,s,a=(Object.getOwnPropertyDescriptor(e,t.toString()),Helpers.getPropertyDisplayName(e,t));if("function"==typeof e)throw new TypeError("@JsonMember cannot be used on a static property ('"+a+"').");if("function"==typeof e[t])throw new TypeError("@JsonMember cannot be used on a method property ('"+a+"').");if(n.hasOwnProperty("elementType")&&(Helpers.warn(a+": the 'elementType' option is deprecated, use 'elements' instead."),n.elements=n.elementType,n.elementType===Array&&(o.forceEnableTypeHinting=!0)),o=Helpers.assign(o,n),o.key=t.toString(),o.name=n.name||t.toString(),Helpers.isReservedMemberName(o.name))throw new Error("@JsonMember: '"+o.name+"' is a reserved name.");if(n.hasOwnProperty("type")&&void 0===n.type)throw new TypeError("@JsonMember: 'type' of '"+a+"' is undefined.");if("object"===("undefined"==typeof Reflect?"undefined":_typeof(Reflect))&&"function"==typeof Reflect.getMetadata){if(void 0===(s=Reflect.getMetadata("design:type",e,t)))throw new TypeError("@JsonMember: type detected for '"+a+"' is undefined.");o.type&&"function"==typeof o.type?o.type!==s&&Helpers.warn("@JsonMember: 'type' specified for '"+a+"' does not match detected type."):o.type=s}jsonMemberTypeInit(o,a),e.hasOwnProperty(METADATA_FIELD_KEY)?r=e[METADATA_FIELD_KEY]:(r=new JsonObjectMetadata,(i=e[METADATA_FIELD_KEY])&&Object.keys(i.dataMembers).forEach(function(e){r.dataMembers[e]=i.dataMembers[e]}),Object.defineProperty(e,METADATA_FIELD_KEY,{enumerable:!1,configurable:!1,writable:!1,value:r})),jsonMemberKnownTypes(o).forEach(function(e){r.setKnownType(e)});try{r.addMember(o)}catch(e){throw new Error("Member '"+o.name+"' already exists on '"+Helpers.getClassName(r.classType)+"'.")}},"string"==typeof t||"symbol"===(void 0===t?"undefined":_typeof(t))?r(e,t):r}var METADATA_FIELD_KEY="__typedJsonJsonObjectMetadataInformation__",JSON;JSON||(JSON={parse:function parse(sJSON){var returnval=sJSON;return"object"===(void 0===returnval?"undefined":_typeof(returnval))?returnval:eval("("+sJSON+")")},stringify:function(){var e=Object.prototype.toString,t=Array.isArray||function(t){return"[object Array]"===e.call(t)},n={'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"},r=function(e){return n[e]||"\\u"+(e.charCodeAt(0)+65536).toString(16).substr(1)},o=/[\\"\u0000-\u001F\u2028\u2029]/g;return function n(i){if(null==i)return"null";if("number"==typeof i)return isFinite(i)?i.toString():"null";if("boolean"==typeof i)return i.toString();if("object"===(void 0===i?"undefined":_typeof(i))){if("function"==typeof i.toJSON)return n(i.toJSON());if(t(i)){for(var s="[",a=0;a<i.length;a++)s+=(a?", ":"")+n(i[a]);return s+"]"}if("[object Object]"===e.call(i)){var p=[];for(var c in i)i.hasOwnProperty(c)&&p.push(n(c)+": "+n(i[c]));return"{"+p.join(", ")+"}"}}return'"'+i.toString().replace(o,r)+'"'}}()});var Helpers;!function(e){function t(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r,o;if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");r=Object(e);for(var i=1;i<arguments.length;i++)if(void 0!==(o=arguments[i])&&null!==o)for(var s in o)o.hasOwnProperty(s)&&(r[s]=o[s]);return r}function n(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"object"===("undefined"==typeof console?"undefined":_typeof(console))&&"function"==typeof console.error?console.error.apply(console,[e].concat(t)):"object"===("undefined"==typeof console?"undefined":_typeof(console))&&"function"==typeof console.log&&console.log.apply(console,["ERROR: "+e].concat(t))}function r(e){var t;return"function"==typeof e?t=e:"object"===(void 0===e?"undefined":_typeof(e))&&(t=e.constructor),t?"name"in t&&"string"==typeof t.name?t.name:t.toString().match(/function (\w*)/)[1]:"undefined"}function o(e){switch(e){case Number:return 0;case String:return"";case Boolean:return!1;case Array:return[];default:return null}}function i(e,t){return r(e)+"."+t.toString()}function s(e){return"function"==typeof Array.isArray?Array.isArray(e):e instanceof Array}function a(e){switch(void 0===e?"undefined":_typeof(e)){case"string":case"number":case"boolean":return!0}return e instanceof String||e===String||e instanceof Number||e===Number||e instanceof Boolean||e===Boolean}function p(e){return e===METADATA_FIELD_KEY}function c(e,t){var n=e.prototype;if(e===t)return!0;for(;n;){if(n instanceof t)return!0;n=n.prototype}return!1}function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"object"===("undefined"==typeof console?"undefined":_typeof(console))&&"function"==typeof console.log&&console.log.apply(console,[e].concat(t))}function f(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r,o;if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");r={},Object.keys(e).forEach(function(t){r[t]=e[t]});for(var i=1;i<arguments.length;i++)if(void 0!==(o=arguments[i])&&null!==o)for(var s in o)o.hasOwnProperty(s)&&(r[s]=o[s]);return r}function l(e){return void 0!==e&&null!==e}function h(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];"object"===("undefined"==typeof console?"undefined":_typeof(console))&&"function"==typeof console.warn?console.warn.apply(console,[e].concat(t)):"object"===("undefined"==typeof console?"undefined":_typeof(console))&&"function"==typeof console.log&&console.log.apply(console,["WARNING: "+e].concat(t))}e.assign=t,e.error=n,e.getClassName=r,e.getDefaultValue=o,e.getPropertyDisplayName=i,e.isArray=s,e.isPrimitive=a,e.isReservedMemberName=p,e.isSubtypeOf=c,e.log=u,e.merge=f,e.valueIsDefined=l,e.warn=h}(Helpers||(Helpers={}));var JsonMemberMetadata=function(){function e(){}return e}(),JsonObjectMetadata=function(){function e(){this._dataMembers={},this._knownTypes=[],this._knownTypeCache=null,this.isExplicitlyMarked=!1}return e.getJsonObjectName=function(e,t){void 0===t&&(t=!0);var n=this.getFromType(e,t);return null!==n?n.className:Helpers.getClassName(e)},e.getFromType=function(e,t){void 0===t&&(t=!0);var n,r;return(n="function"==typeof e?e.prototype:e)?(n.hasOwnProperty(METADATA_FIELD_KEY)?r=n[METADATA_FIELD_KEY]:t&&n[METADATA_FIELD_KEY]&&(r=n[METADATA_FIELD_KEY]),r&&r.isExplicitlyMarked?r:null):null},e.getFromInstance=function(e,t){return void 0===t&&(t=!0),this.getFromType(Object.getPrototypeOf(e),t)},e.getKnownTypeNameFromType=function(e){var t=this.getFromType(e,!1);return t?t.className:Helpers.getClassName(e)},e.getKnownTypeNameFromInstance=function(e){var t=this.getFromInstance(e,!1);return t?t.className:Helpers.getClassName(e.constructor)},Object.defineProperty(e.prototype,"dataMembers",{get:function(){return this._dataMembers},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return"string"==typeof this._className?this._className:Helpers.getClassName(this.classType)},set:function(e){this._className=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"knownTypes",{get:function(){var t,n;return t={},this._knownTypes.forEach(function(r){n=e.getKnownTypeNameFromType(r),t[n]=r}),this._knownTypeCache=t,t},enumerable:!0,configurable:!0}),e.prototype.setKnownType=function(e){-1===this._knownTypes.indexOf(e)&&(this._knownTypes.push(e),this._knownTypeCache=null)},e.prototype.addMember=function(e){var t=this;Object.keys(this._dataMembers).forEach(function(n){if(t._dataMembers[n].name===e.name)throw new Error("A member with the name '"+e.name+"' already exists.")}),this._dataMembers[e.key]=e},e.prototype.sortMembers=function(){var e=this,t=[];Object.keys(this._dataMembers).forEach(function(n){t.push(e._dataMembers[n])}),t=t.sort(this.sortMembersCompare),this._dataMembers={},t.forEach(function(t){e._dataMembers[t.key]=t})},e.prototype.sortMembersCompare=function(e,t){if("number"!=typeof e.order&&"number"!=typeof t.order){if(e.name<t.name)return-1;if(e.name>t.name)return 1}else{if("number"!=typeof e.order)return 1;if("number"!=typeof t.order)return-1;if(e.order<t.order)return-1;if(e.order>t.order)return 1;if(e.name<t.name)return-1;if(e.name>t.name)return 1}return 0},e}();exports.JsonObject=JsonObject,exports.JsonMember=JsonMember;var Serializer=function(){function e(){}return e.writeObject=function(e,t){var n,r=JsonObjectMetadata.getFromInstance(e);return n=r?r.classType:e.constructor,JSON.stringify(this.writeToJsonObject(e,{objectType:n,enableTypeHints:t.enableTypeHints,typeHintPropertyKey:t.typeHintPropertyKey}),t.replacer)},e.writeToJsonObject=function(e,t){var n,r,o=this;if(null===e||void 0===e)n=t.emitDefault?Helpers.getDefaultValue(t.objectType):e;else if(Helpers.isPrimitive(e)||e instanceof Date)n=e;else if(e instanceof Array){n=[];for(var i=0,s=e.length;i<s;i++)n.push(this.writeToJsonObject(e[i],{elements:t.elements?t.elements.elements:null,enableTypeHints:t.enableTypeHints,objectType:t.elements?t.elements.type:Object,requireTypeHints:t.requireTypeHints,typeHintPropertyKey:t.typeHintPropertyKey}))}else r=JsonObjectMetadata.getFromInstance(e),r&&"function"==typeof r.serializer?n=r.serializer(e):(n={},t.enableTypeHints&&(t.requireTypeHints||e.constructor!==t.objectType)&&(n[t.typeHintPropertyKey]=JsonObjectMetadata.getKnownTypeNameFromInstance(e)),r?(r.sortMembers(),Object.keys(r.dataMembers).forEach(function(i){var s=r.dataMembers[i];n[s.name]=o.writeToJsonObject(e[i],{elements:s.elements,emitDefault:s.emitDefaultValue,enableTypeHints:t.enableTypeHints,name:s.name,objectType:s.type,requireTypeHints:t.requireTypeHints,typeHintPropertyKey:t.typeHintPropertyKey})})):Object.keys(e).forEach(function(r){n[r]=o.writeToJsonObject(e[r],{enableTypeHints:t.enableTypeHints,objectType:Object,requireTypeHints:t.requireTypeHints,typeHintPropertyKey:t.typeHintPropertyKey})}));return n},e}(),Deserializer=function(){function e(){}return e.readObject=function(e,t,n){var r,o=JsonObjectMetadata.getFromType(t);if(r="Object"==typeof e?e:JSON.parse(e,n.reviver),"number"==typeof n.maxObjects&&this.countObjects(r)>n.maxObjects)throw new Error("JSON exceeds object count limit ("+n.maxObjects+").");return this.readJsonToInstance(r,{objectType:t,typeHintPropertyKey:n.typeHintPropertyKey,enableTypeHints:n.enableTypeHints,strictTypeHintMode:!0,knownTypes:o?o.knownTypes:{}})},e.countObjects=function(e){var t=this;switch(void 0===e?"undefined":_typeof(e)){case"object":if(null===e)return 0;if(Helpers.isArray(e)){var n=0;return e.forEach(function(e){n+=t.countObjects(e)}),n}var r=0;return Object.keys(e).forEach(function(n){r+=t.countObjects(e[n])}),r;case"undefined":return 0;default:return 1}},e.readJsonToInstance=function(e,t){var n,r,o,i,s,a=this;if(void 0===e||null===e){if(t.isRequired)throw new Error("Missing required member.")}else if(Helpers.isPrimitive(t.objectType)){if(e.constructor!==t.objectType){var p=Helpers.getClassName(t.objectType).toLowerCase(),c=Helpers.getClassName(e.constructor).toLowerCase();throw new TypeError("Expected value to be of type '"+p+"', got '"+c+"'.")}n=e}else if(t.objectType===Array){if(!Helpers.isArray(e))throw new TypeError("Expected value to be of type 'Array', got '"+Helpers.getClassName(e.constructor)+"'.");n=[],e.forEach(function(e){n.push(a.readJsonToInstance(e,{elements:t.elements?t.elements.elements:null,enableTypeHints:t.enableTypeHints,knownTypes:t.knownTypes,objectType:t.elements?t.elements.type:e.constructor,requireTypeHints:t.requireTypeHints,strictTypeHintMode:t.strictTypeHintMode,typeHintPropertyKey:t.typeHintPropertyKey}))})}else if(t.objectType===Date)if("string"==typeof e)n=new Date(e);else{if(!(e instanceof Date))throw new TypeError("Expected value to be of type 'string', got '"+(void 0===e?"undefined":_typeof(e))+"'.");n=e}else{if((i=e[t.typeHintPropertyKey])&&t.enableTypeHints){if("string"!=typeof i)throw new TypeError("Type-hint ("+t.typeHintPropertyKey+") must be a string.");if(!t.knownTypes[i])throw new Error("'"+i+"' is not a known type.");if(t.strictTypeHintMode&&!Helpers.isSubtypeOf(t.knownTypes[i],t.objectType))throw new Error("'"+i+"' is not a subtype of '"+Helpers.getClassName(t.objectType)+"'.");o=t.knownTypes[i],r=JsonObjectMetadata.getFromType(o)}else{if(t.enableTypeHints&&t.requireTypeHints)throw new Error("Missing required type-hint.");o=t.objectType,r=JsonObjectMetadata.getFromType(t.objectType)}r?"function"==typeof r.initializer?n=r.initializer(e)||null:(r.sortMembers(),n=new o,Object.keys(r.dataMembers).forEach(function(o){var i=r.dataMembers[o];s=a.readJsonToInstance(e[i.name],{elements:i.elements,enableTypeHints:t.enableTypeHints,isRequired:i.isRequired,knownTypes:Helpers.merge(t.knownTypes,r.knownTypes||{}),objectType:i.type,requireTypeHints:t.requireTypeHints,strictTypeHintMode:t.strictTypeHintMode,typeHintPropertyKey:t.typeHintPropertyKey}),Helpers.valueIsDefined(s)&&(n[o]=s)})):(n={},Object.keys(e).forEach(function(r){e[r]&&r!==t.typeHintPropertyKey&&(n[r]=a.readJsonToInstance(e[r],{enableTypeHints:t.enableTypeHints,knownTypes:t.knownTypes,objectType:e[r].constructor,requireTypeHints:t.requireTypeHints,typeHintPropertyKey:t.typeHintPropertyKey}))}))}return n},e}(),configSettings={enableTypeHints:!0,typeHintPropertyKey:"__type"},TypedJSON={config:function(e){configSettings=Helpers.merge(configSettings,e)},stringify:function(e,t){return Serializer.writeObject(e,Helpers.merge(configSettings,t||{}))},parse:function(e,t,n){return JsonObjectMetadata.getFromType(t)?Deserializer.readObject(e,t,Helpers.merge(configSettings,n||{})):JSON.parse.apply(JSON,arguments)}};exports.TypedJSON=TypedJSON})},{}]},{},[7])(7)})}).call(exports,__webpack_require__(16))}},[17]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,